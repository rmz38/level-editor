{"version":3,"sources":["components/Turret.tsx","components/World.tsx","components/Door.tsx","components/Avatar.tsx","components/Capsule.tsx","components/Diamond.tsx","components/Round.tsx","components/Enemy.tsx","components/AddButton.tsx","components/ItemDashboard.tsx","components/LevelWindowItem.tsx","components/LevelWindow.tsx","App.tsx","index.tsx"],"names":["Turret","gc","info","update","selected","id","world","useState","isOpen","setIsOpen","pos","shrink","texture","entitytype","cooldown","direction","bodytype","density","posState","shrinkState","textureState","densityState","bodytypeState","entitytypeState","cooldownState","directionState","convertedPos","bounds","updatedState","ButtonGroup","Button","color","onClick","style","backgroundColor","marginBottom","isOpened","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onBlur","e","target","value","defaultValue","display","height","width","opacity","position","left","bottom","World","gravity","backgroundPres","backgroundPast","diamondshape","capsuleshape","roundshape","heavy_density","friction","restitution","bullet_offset","effect_volume","gravityState","boundsState","backgroundPastState","backgroundPresState","diamondshapeState","capsuleshapeState","roundshapeState","densityShape","heavy_densityState","frictionState","restitutionState","bullet_offsetState","effect_volumeState","Door","size","sensor","nextlevel","space","console","log","sizeState","sensorState","nextlevelState","spaceState","default","Value","toString","Avatar","avatarstanding","avatarcrouching","avatardashing","avatarfalling","avatarstandingState","avatarcrouchingState","avatardashingState","avatarfallingState","Capsule","name","nameState","resitution","Diamond","Round","Enemy","AddButton","gameObjects","updateTurret","updateEnemy","updatePlatform","numPlat","updateNumPlat","avatar","door","turrets","diamonds","rounds","enemies","capsules","isCheckedTurret","setIsCheckedTurret","isCheckedEnemy","setIsCheckedEnemy","isCheckedPlatform","setIsCheckedPlatform","posStateTurret","shrinkStateTurret","textureStateTurret","densityStateTurret","bodytypeStateTurret","entitytypeStateTurret","cooldownStateTurret","directionStateTurret","posStateEnemy","shrinkStateEnemy","densityStateEnemy","bodytypeStateEnemy","entitytypeStateEnemy","cooldownStateEnemy","platformType","posStatePlatform","bodytypeStatePlatform","densityStatePlatform","frictionStatePlatform","restitutionStatePlatform","spaceStatePlatform","itemTypeStyle","marginLeft","UncontrolledCollapse","toggler","Form","inline","FormGroup","Label","check","onChange","type","defaultChecked","newTurret","newEnemy","newKey","time","newPlatform","windowStyling","background","float","overflow","ItemDashboard","gameObjectsInput","updateNumPlatApp","numEnemy","updateNumEnemyApp","JSON","parse","stringify","setGameObjects","updateTurretState","newTurr","newTurrets","add","Object","entries","key","updateNumEnemy","newGameObjects","updateCapsuleState","newCap","newCapsules","updateDiamondState","newDia","newDiamonds","updateRoundState","newRound","newRounds","updateEnemyState","newEnemies","n","newWorld","newDoor","newAva","componentList","components","push","Math","random","className","LevelWindowItem","temp","texturePres","idInput","texturePast","posInput","updatePosInput","centered","scaleY","scaleX","lineX1","lineY1","lineX2","lineY2","setHeight","setWidth","coords","x1","undefined","x2","y1","y2","onStop","data","x","y","ref","el","src","onLoad","naturalWidth","naturalHeight","zIndex","stroke","strokeWidth","minHeight","minWidth","LevelWindow","backgroundPastPath","gameObjectState","backgroundPresPath","updateState","gameCoordToPx","updatePos","p","px","includes","newGS","windowItems","top","levelInit","presentcapsule1","pastcapsule1","presentdiamond1","pastdiamond1","pastdiamond2","presentround1","presentround2","pastround1","enemy1","enemy2","turret1","turret2","containerStyling","headerStyling","padding","App","setWorld","setAvatar","setDoor","setTurrets","setCapsules","setDiamonds","setRounds","setEnemies","setNumPlat","setNumEnemy","editorObjects","newState","tester","present_background","past_background","FileReader","onload","newJSON","result","reformat","objectData","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","a","document","createElement","download","href","encodeURIComponent","body","appendChild","click","removeChild","exportToJson","fontSize","open","map","item","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7e03efe5.chunk.js","sourcesContent":["import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, ButtonGroup, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"turret2\": {\r\n//     \"pos\": [8.5, 5.0],\r\n//     \"shrink\": [0.0168, 0.021375],\r\n//     \"texture\": \"turret\",\r\n//     \"entitytype\": \"past\",\r\n//     \"cooldown\": 480,\r\n//     \"direction\": [0.0, 2.0],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 1.0\r\n//   }\r\n\r\nconst Turret : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, entitytype, cooldown, direction, bodytype, density} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let entitytypeState = entitytype\r\n  let cooldownState = cooldown\r\n  let directionState = direction\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          entitytype:entitytypeState,\r\n          cooldown:cooldownState,\r\n          direction:directionState\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#5143a3', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState(), id)}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {entitytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownState = +e.target.value; update(updatedState(), id)}} defaultValue = {cooldown}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Direction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{directionState = [+e.target.value, direction[1]]; update(updatedState(), id)}} defaultValue = {direction[0]}/>\r\n            <Input onBlur={(e) =>{directionState = [direction[0], +e.target.value]; update(updatedState(), id)}} defaultValue = {direction[1]}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'60px', width: '60px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 20 , bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Turret;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n\r\n// gravity: -14.7,\r\n//     bounds: [32.0,18.0],\r\n//     backgroundPres: 'present_background',\r\n//     backgroundPast: 'past_background',\r\n//     diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n//     capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n//     roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n//     density: 0.0,\r\n//     heavy_density: 10.0,\r\n//     friction: 0.6,\r\n//     restitution: 0.1,\r\n//     bullet_offset: 0.7,\r\n//     effect_volume: 0.8\r\nconst World : React.FC<Props> = ({info, update,selected}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {gravity, bounds, backgroundPres, backgroundPast, diamondshape, capsuleshape, roundshape, density, heavy_density, friction, restitution, bullet_offset, effect_volume} = info\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  let gravityState = gravity\r\n  let boundsState = bounds\r\n  let backgroundPastState = backgroundPast\r\n  let backgroundPresState = backgroundPres\r\n  let diamondshapeState = diamondshape\r\n  let capsuleshapeState = capsuleshape \r\n  let roundshapeState = roundshape\r\n  let densityShape = density\r\n  let heavy_densityState = heavy_density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let bullet_offsetState = bullet_offset\r\n  let effect_volumeState = effect_volume\r\n  \r\n  let updatedState = () => {\r\n    return {\r\n        gravity:gravityState,\r\n        bounds:boundsState,\r\n        backgroundPast:backgroundPastState,\r\n        backgroundPres: backgroundPresState,\r\n        diamondshape: diamondshapeState,\r\n        capsuleshape: capsuleshapeState,\r\n        roundshape: roundshapeState,\r\n        density: densityShape,\r\n        heavy_density: heavy_densityState,\r\n        friction: frictionState,\r\n        restitution: restitutionState,\r\n        bullet_offset: bullet_offsetState,\r\n        effect_volume: effect_volumeState\r\n    }\r\n}\r\n\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ marginBottom: '2px' }}>World</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Gravity</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{gravityState = +e.target.value; update(updatedState())}} defaultValue={gravity} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Bounds</InputGroupText>\r\n          </InputGroupAddon>\r\n          {/* TODO: change bounds input  */}\r\n          <Input onBlur={e =>{boundsState = [+e.target.value,boundsState[1]]; update(updatedState())}} defaultValue={bounds[0]} />\r\n          <Input onBlur={e =>{boundsState = [boundsState[0], +e.target.value]; update(updatedState())}} defaultValue = {bounds[1]} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Past Background</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPastState = e.target.value; update(updatedState())}} defaultValue={backgroundPast} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Pres Background</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPresState = e.target.value; update(updatedState())}} defaultValue={backgroundPres} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Bullet Offset</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{bullet_offsetState = +e.target.value; update(updatedState())}} defaultValue={bullet_offset} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Effect Volume</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{effect_volumeState = +e.target.value; update(updatedState())}} defaultValue={effect_volume} />\r\n        </InputGroup>\r\n        {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Diamond Shape</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPresState = e.target.value; update(updatedState())}} defaultValue={backgroundPres} />\r\n        </InputGroup> */}\r\n        \r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default World;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n}\r\n\r\n// \"door\": {\r\n//   \"pos\": [\r\n//     29.5,\r\n//     15.5\r\n//   ],\r\n//   \"size\": [\r\n//     1.6,\r\n//     1.6\r\n//   ],\r\n//   \"texture\": \"goal\",\r\n//   \"bodytype\": \"static\",\r\n//   \"density\": 0.0,\r\n//   \"friction\": 0.0,\r\n//   \"restitution\": 0.0,\r\n//   \"sensor\": true,\r\n//   \"nextlevel\": 0,\r\n//   \"space\": 3\r\nconst Door : React.FC<Props> = ({info, update,selected, world}) => {\r\n  const{ pos, size, bodytype, density, friction, restitution, texture, sensor, nextlevel, space} = info\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  console.log(sensor);\r\n  let posState = pos\r\n  let sizeState = size\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let sensorState = sensor\r\n  let nextlevelState = nextlevel\r\n  let spaceState = space\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      pos:posState,\r\n      size:sizeState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      restitution:restitutionState,\r\n      texture:textureState,\r\n      sensor:sensorState,\r\n      nextlevel:nextlevelState,\r\n      space:spaceState\r\n    }\r\n\r\n  }\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n    selected('door', isOpen);\r\n  }\r\n  ;\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"door\" style={{ marginBottom: '1rem' }}>Door</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position(x,y)</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{posState[0] = +e.target.value; update(updatedState())}} default Value = {pos[0]}/>\r\n          <Input onBlur={e =>{posState[1] = +e.target.value; update(updatedState())}} default Value = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Size</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{sizeState[0] = +e.target.value; update(updatedState())}} default Value = {size[0]}/>\r\n          <Input onBlur={e =>{sizeState[1] = +e.target.value; update(updatedState())}} default Value = {size[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{bodytypeState = e.target.value; update(updatedState())}} default Value = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{densityState = +e.target.value; update(updatedState())}} default Value = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{frictionState = +e.target.value; update(updatedState())}} default Value = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{restitutionState = +e.target.value; update(updatedState())}} default Value = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{textureState = e.target.value; update(updatedState())}} default Value = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Sensor</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{sensorState = (e.target.value == 'true'); update(updatedState())}} default Value = {sensor.toString()}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Next Level</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{nextlevelState = +e.target.value; update(updatedState())}} default Value = {nextlevel}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{spaceState = e.target.value; update(updatedState())}} default Value = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 40 + 'px', bottom:convertedPos[1] - 40 + 'px'}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Door;\r\n\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world: any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n // \"pos\": [2.5,5.0],/\r\n  //   \"shrink\": [0.0216,0.01125],/\r\n  //   \"texture\": \"dude\",\r\n  //   \"density\": 1.0,\r\n  //   \"bodytype\": \"dynamic\", /\r\n  //   \"avatarstanding\": \"avatarstanding\",\r\n  //   \"avatarcrouching\": \"avatarcrouching\",\r\n  //   \"avatardashing\": \"avatardashing\",\r\n  //   \"avatarfalling\": \"avatarfalling\"\r\n\r\nconst Avatar : React.FC<Props> = ({info, update,selected, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, density, bodytype, avatarstanding, avatarcrouching, avatardashing, avatarfalling} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let avatarstandingState = avatarstanding\r\n  let avatarcrouchingState = avatarcrouching\r\n  let avatardashingState = avatardashing\r\n  let avatarfallingState = avatarfalling\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          avatarstanding: avatarstandingState,\r\n          avatarcrouching: avatarcrouchingState,\r\n          avatardashing: avatardashingState,\r\n          avatarfalling: avatarfallingState\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ marginBottom: '1rem' }}>Avatar</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState())}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState())}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState())}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState())}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState())}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState())}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState())}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState())}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState())}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Standing</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarstandingState = e.target.value; update(updatedState())}} defaultValue = {avatarfalling}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Crouching</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarcrouchingState = e.target.value; update(updatedState())}} defaultValue = {avatarcrouching}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Dashing</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatardashingState = e.target.value; update(updatedState())}} defaultValue = {avatardashing}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Falling</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarfallingState = e.target.value; update(updatedState())}} defaultValue = {avatarfalling}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'60px', width: '60px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 30, bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Avatar;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentcapsule1\": {\r\n//     \"name\": \"present_capsule\",\r\n//     \"pos\": [\r\n//       3.0,\r\n//       7.0\r\n//     ],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_capsule\",\r\n//     \"space\": 1\r\n//   }\r\n\r\nconst Capsule : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('capsule', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"capsule\" style={{ backgroundColor:'#36ffae', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0], bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Capsule;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentdiamond2\": {\r\n//     \"name\": \"present_diamond\",\r\n//     \"pos\": [\r\n//       11.0,\r\n//       7.0\r\n//     ],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_diamond\",\r\n//     \"space\": 1\r\n//   },\r\n\r\nconst Diamond : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#6993f5', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0], bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Diamond;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentround1\": {\r\n//     \"name\": \"present_round\",\r\n//     \"pos\": [11.5, 2.0],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_round\",\r\n//     \"space\": 1\r\n//   },\r\n\r\nconst Round : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#ad42f5', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0], bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Round;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, ButtonGroup, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"enemy1\": {\r\n//     \"pos\": [13.0, 6.0],\r\n//     \"shrink\": [0.0168, 0.021375],\r\n//     \"texture\": \"enemypresent\",\r\n//     \"entitytype\": \"present\",\r\n//     \"cooldown\": 120,\r\n//     \"bodytype\": \"dynamic\",\r\n//     \"density\": 1.0\r\n//   },\r\nconst Enemy : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, entitytype, cooldown, bodytype, density} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let entitytypeState = entitytype\r\n  let cooldownState = cooldown\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          entitytype:entitytypeState,\r\n          cooldown:cooldownState,\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#f79400', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState(), id)}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {entitytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownState = +e.target.value; update(updatedState(), id)}} defaultValue = {cooldown}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'60px', width: '60px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 30, bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Enemy;\r\n","import { UncontrolledCollapse, Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\n\r\nimport React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledDropdown, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText} from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  gameObjects: any\r\n  updateTurret: (data:any, id:string) => void\r\n  updateEnemy: (data:any, id:string) => void\r\n  updatePlatform: (data:any, id:string, type:string) => void\r\n  updateNumPlat: (n:number) => void\r\n  numPlat:number\r\n  // selected: (compName:string, open:boolean) => void\r\n}\r\n\r\nconst AddButton : React.FC<Props> = ({gameObjects, updateTurret, updateEnemy,updatePlatform, numPlat, updateNumPlat}) => {\r\n  let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n  const [isCheckedTurret, setIsCheckedTurret] = useState(true);\r\n  const [isCheckedEnemy, setIsCheckedEnemy] = useState(false);\r\n  const [isCheckedPlatform, setIsCheckedPlatform] = useState(false);\r\n  const [isCheckedCapsule, setIsCheckedCapsule] = useState(false);\r\n  const [isCheckedDiamond, setIsCheckedDiamond] = useState(false);\r\n  const [isCheckedRound, setIsCheckedRound] = useState(false);\r\n  // const [numPlatforms, setNumPlatforms] =useState(numPlat)\r\n  const [init, setInit] = useState(true);\r\n\r\n  let openTurret = () => {\r\n    setIsCheckedEnemy(false);\r\n    setIsCheckedTurret(true);\r\n    setIsCheckedPlatform(false);\r\n  }\r\n  let openEnemy = () => {\r\n    setIsCheckedEnemy(true);\r\n    setIsCheckedTurret(false);\r\n    setIsCheckedPlatform(false);\r\n  }\r\n  let openPlatform = () => {\r\n    setIsCheckedEnemy(false);\r\n    setIsCheckedTurret(false);\r\n    setIsCheckedPlatform(true);\r\n  }\r\n  // let openCapsule = () => {\r\n  //   openPlatform()\r\n\r\n  // }\r\n  \r\n  //turret states \r\n  let posStateTurret= [17,9]\r\n  let shrinkStateTurret = [0.0168, 0.021375]\r\n  let textureStateTurret = 'turret'\r\n  let densityStateTurret = 1.0\r\n  let bodytypeStateTurret = 'static'\r\n  let entitytypeStateTurret = 'present'\r\n  let cooldownStateTurret = 360\r\n  let directionStateTurret = [-3, 0]\r\n\r\n  //enemy states\r\n  let posStateEnemy= [17, 9]\r\n  let shrinkStateEnemy = [0.0168, 0.021375]\r\n  let textureStateEnemy = 'enemypresent'\r\n  let densityStateEnemy = 1.0\r\n  let bodytypeStateEnemy = 'dynamic'\r\n  let entitytypeStateEnemy = 'present'\r\n  let cooldownStateEnemy = 120\r\n\r\n  //platform states \r\n  let platformType = 'capsule'\r\n  let nameStatePlatform = 'present_capsule'\r\n  let posStatePlatform= [17, 9]\r\n  let bodytypeStatePlatform = 'static'\r\n  let densityStatePlatform = 0.0\r\n  let frictionStatePlatform = .6\r\n  let restitutionStatePlatform = .1\r\n  let textureStatePlatform = 'present_capsule'\r\n  let spaceStatePlatform = 1\r\n\r\n  let newTurret = () => {\r\n    let newKey = 'turret'\r\n    let newTurret = {\r\n      pos:posStateTurret,\r\n      shrink:shrinkStateTurret,\r\n      texture:textureStateTurret,\r\n      density:densityStateTurret,\r\n      bodytype:bodytypeStateTurret,\r\n      entitytype:entitytypeStateTurret,\r\n      cooldown:cooldownStateTurret,\r\n      direction:directionStateTurret\r\n    }\r\n    updateTurret(newTurret, newKey)\r\n  }\r\n  let newEnemy = () => {\r\n    let newKey = 'enemy'\r\n    let newEnemy = {\r\n      pos:posStateEnemy,\r\n      shrink:shrinkStateEnemy,\r\n      texture:'enemy' + entitytypeStateEnemy,\r\n      density:densityStateEnemy,\r\n      bodytype:bodytypeStateEnemy,\r\n      entitytype:entitytypeStateEnemy,\r\n      cooldown:cooldownStateEnemy,\r\n    }\r\n    updateEnemy(newEnemy, newKey)\r\n  }\r\n  let newPlatform = (type:string) => {\r\n    let time = 'bugHappened'\r\n    let newKey = 'bugHappened'\r\n    if (spaceStatePlatform === 1 || spaceStatePlatform === 3){\r\n      time = 'present'\r\n    } else if(spaceStatePlatform === 2){\r\n      time = 'past'\r\n    } else {\r\n      time = 'bugNotPastPres'\r\n    }\r\n\r\n    newKey = time + type\r\n    let newPlatform = {\r\n      name:time + \"_\" + platformType,\r\n      pos:posStatePlatform,\r\n      bodytype:bodytypeStatePlatform,\r\n      density:densityStatePlatform,\r\n      friction:frictionStatePlatform,\r\n      restitution:restitutionStatePlatform,\r\n      texture:time + \"_\" + platformType,\r\n      space:spaceStatePlatform\r\n    }\r\n    updateNumPlat(numPlat + 1)\r\n    updatePlatform(newPlatform, newKey, platformType)\r\n  }\r\n\r\n  let itemTypeStyle = {\r\n    marginLeft: '5px'\r\n  };\r\n  return (\r\n    <div >\r\n      <Button color=\"secondary\" id=\"toggler\" style={{ backgroundColor: '#fa511e', marginBottom: '2px' }}>Add</Button>\r\n      <UncontrolledCollapse toggler = \"#toggler\">\r\n        <Form inline>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {() => {openTurret()}} type=\"radio\" name=\"itemType\" id=\"itemTypeTurret\" style = {{marginLeft: '8px'}}defaultChecked /> Turret {' '} \r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {() => {openEnemy()}} type=\"radio\" name=\"itemType\" id=\"itemTypeEnemy\" /> Enemy {' '}\r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {() => {openPlatform()}} type=\"radio\" name=\"itemType\"  id=\"itemTypePlatform\" /> Platform {' '} \r\n            </Label>\r\n          </FormGroup>  \r\n        </Form>\r\n        {/* turret inputs */}\r\n        <Collapse isOpened = {isCheckedTurret}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posStateTurret =[+e.target.value,posStateTurret[1]]; }} defaultValue = {posStateTurret[0]}/>\r\n            <Input onBlur={(e) =>{posStateTurret =[posStateTurret[0],+e.target.value];  }} defaultValue = {posStateTurret[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkStateTurret =[+e.target.value,shrinkStateTurret[1]]; }} defaultValue = {shrinkStateTurret[0]}/>\r\n            <Input onBlur={(e) =>{shrinkStateTurret =[shrinkStateTurret[0],+e.target.value];  }} defaultValue = {shrinkStateTurret[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureStateTurret = e.target.value;  }} defaultValue = {textureStateTurret}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityStateTurret = +e.target.value;  }} defaultValue = {densityStateTurret}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeStateTurret = e.target.value;  }} defaultValue = {bodytypeStateTurret}/>\r\n        </InputGroup>\r\n        <Form inline>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {(e) => {entitytypeStateTurret = 'present';}} type=\"radio\" name=\"entitytypeTurret\" id=\"present\" style = {{marginLeft: '8px'}} defaultChecked /> Present {' '} \r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {(e) => {entitytypeStateTurret = 'past';}} type=\"radio\" name=\"entitytypeTurret\" id=\"past\" /> Past {' '}\r\n            </Label>\r\n          </FormGroup>\r\n        </Form>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownStateTurret = +e.target.value;  }} defaultValue = {cooldownStateTurret}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Direction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{directionStateTurret = [+e.target.value, directionStateTurret[1]];  }} defaultValue = {directionStateTurret[0]}/>\r\n            <Input onBlur={(e) =>{directionStateTurret = [directionStateTurret[0], +e.target.value];  }} defaultValue = {directionStateTurret[1]}/>\r\n        </InputGroup>\r\n        <Button onClick = {() => {newTurret()}}>Submit</Button>\r\n        </Collapse>\r\n        {/* end turret inputs */}\r\n        {/* begin enemy inputs */}\r\n        <Collapse isOpened = {isCheckedEnemy}>\r\n        <Form inline>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {(e) => {entitytypeStateEnemy = 'present';}} type=\"radio\" name=\"entitytypeEnemy\" id=\"present\" style = {{marginLeft: '8px'}} defaultChecked /> Present {' '} \r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {(e) => {entitytypeStateEnemy = 'past';}} type=\"radio\" name=\"entitytypeEnemy\" id=\"past\" /> Past {' '}\r\n            </Label>\r\n          </FormGroup>\r\n        </Form>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posStateEnemy =[+e.target.value,posStateEnemy[1]];   }} defaultValue = {posStateEnemy[0]}/>\r\n            <Input onBlur={(e) =>{posStateEnemy =[posStateEnemy[0],+e.target.value];   }} defaultValue = {posStateEnemy[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkStateEnemy =[+e.target.value,shrinkStateEnemy[1]];   }} defaultValue = {shrinkStateEnemy[0]}/>\r\n            <Input onBlur={(e) =>{shrinkStateEnemy =[shrinkStateEnemy[0],+e.target.value];   }} defaultValue = {shrinkStateEnemy[1]}/>\r\n        </InputGroup>\r\n        {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureStateEnemy = e.target.value;   }} defaultValue = {textureStateEnemy}/>\r\n        </InputGroup> */}\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityStateEnemy = +e.target.value;   }} defaultValue = {densityStateEnemy}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeStateEnemy = e.target.value;   }} defaultValue = {bodytypeStateEnemy}/>\r\n        </InputGroup>\r\n        {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeStateEnemy = e.target.value;   }} defaultValue = {entitytypeStateEnemy}/>\r\n        </InputGroup> */}\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownStateEnemy = +e.target.value;}} defaultValue = {cooldownStateEnemy}/>\r\n        </InputGroup>\r\n        <Button onClick = {() => {newEnemy()}}>Submit</Button>\r\n        </Collapse>\r\n        {/* end enemy inputs */}\r\n        {/* begin platform inputs */}\r\n        <Collapse isOpened = {isCheckedPlatform}>\r\n        <Form inline>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {(e) => {platformType = 'capsule';}} type=\"radio\" name=\"platformType\" id=\"capsule\" style = {{marginLeft: '8px'}} defaultChecked /> Capsule {' '} \r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {(e) => {platformType = 'diamond';}} type=\"radio\" name=\"platformType\" id=\"diamond\" /> Diamond {' '}\r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {(e) => {platformType = 'round';}} type=\"radio\" name=\"platformType\"  id=\"round\" /> Round {' '} \r\n            </Label>\r\n          </FormGroup>  \r\n        </Form>\r\n        <Form inline>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {(e) => {spaceStatePlatform = 1;}} type=\"radio\" name=\"space\" id=\"present\" style = {{marginLeft: '8px'}} defaultChecked /> Present {' '} \r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {(e) => {spaceStatePlatform = 2;}} type=\"radio\" name=\"space\" id=\"past\" /> Past {' '}\r\n            </Label>\r\n          </FormGroup>\r\n        </Form>\r\n        {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameStatePlatform = e.target.value;   }} defaultValue = {nameStatePlatform}/>\r\n        </InputGroup> */}\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posStatePlatform =[+e.target.value,posStatePlatform[1]];   }} defaultValue = {posStatePlatform[0]}/>\r\n            <Input onBlur={(e) =>{posStatePlatform =[posStatePlatform[0],+e.target.value];   }} defaultValue = {posStatePlatform[1]}/>\r\n        </InputGroup>\r\n        {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureStatePlatform = e.target.value;   }} defaultValue = {textureStatePlatform}/>\r\n        </InputGroup> */}\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityStatePlatform = +e.target.value;   }} defaultValue = {densityStatePlatform}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeStatePlatform = e.target.value;   }} defaultValue = {bodytypeStatePlatform}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionStatePlatform = +e.target.value;   }} defaultValue = {frictionStatePlatform}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionStatePlatform = +e.target.value;   }} defaultValue = {restitutionStatePlatform}/>\r\n        </InputGroup>\r\n        {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceStatePlatform = +e.target.value;   }} defaultValue = {spaceStatePlatform}/>\r\n        </InputGroup> */}\r\n        <Button onClick = {() => {newPlatform(platformType)}}>Submit</Button>\r\n        </Collapse>\r\n      </UncontrolledCollapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddButton;\r\n\r\n","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\n// import GameObject  from './GameObject';\r\nimport Turret from './Turret';\r\nimport World from './World';\r\nimport Door from './Door';\r\nimport Avatar from './Avatar';\r\nimport Capsule from './Capsule';\r\nimport Diamond from './Diamond';\r\nimport Round from './Round';\r\nimport Enemy from './Enemy';\r\nimport AddButton from './AddButton';\r\n\r\ninterface Props {\r\n    gameObjectsInput: any;\r\n    update: (data:any) => void\r\n    selected: (id:string, open:boolean) => void\r\n    numPlat: number\r\n    numEnemy: number\r\n    updateNumPlatApp: (n:number) => void\r\n    updateNumEnemyApp: (n:number) => void\r\n}\r\n\r\n// interface GameObjectType{\r\n//   name: string,\r\n//   jsonitem: Object\r\n// }\r\nconst objectTypes = ['world', 'turret']\r\nconst windowStyling : CSS.Properties= {\r\n    height: '100%',\r\n    width: '100%',\r\n    background: '#aaaaaa',\r\n    display: 'inline-block',\r\n    float: 'right',\r\n    overflow: 'scroll'\r\n}\r\n// function createTurret(p:Array<number>){\r\n//   return <Turret pos = {p} updatefn = {updateTurret}></Turret>;\r\n// }\r\n\r\nconst ItemDashboard : React.FC<Props> = ({gameObjectsInput, update, selected, numPlat, updateNumPlatApp, numEnemy, updateNumEnemyApp}) => {\r\n  const [gameObjects, setGameObjects] = useState<any>(JSON.parse(JSON.stringify(gameObjectsInput)));\r\n  let {avatar, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n  //updates in App the state assuming world was changed\r\n  let updateWorldState = (newWorld:any) => {\r\n    \r\n    let newGameObjects = {\r\n      world:newWorld,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects);\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //updates Apps state assuming door was changed\r\n  let updateDoorState = (newDoor:any) => {\r\n    let {world, avatar, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:newDoor,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //updates Apps state assuming avatar was changed\r\n  let updateAvatarState = (newAva:any) => {\r\n    let {world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:newAva,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateTurretState = (newTurr:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newTurrets = turrets;\r\n    let add = true;\r\n    if( newTurr == 'delete'){\r\n      delete newTurrets[id]\r\n    }else {\r\n      for (let [key, value] of Object.entries(turrets)) {\r\n        if(key == id){\r\n          newTurrets[key] = newTurr;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){id = id + (numEnemy + 1); updateNumEnemy(numEnemy + 1); newTurrets[id] = newTurr}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:newTurrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n\r\n  let updateCapsuleState = (newCap:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newCapsules = capsules;\r\n    let add = true;\r\n    if(newCap == 'delete'){\r\n      delete newCapsules[id]\r\n    } else {\r\n      for (let [key, value] of Object.entries(capsules)) {\r\n        if(key == id){\r\n          newCapsules[key] = newCap;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){newCapsules[id] = newCap}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:newCapsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateDiamondState = (newDia:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newDiamonds = diamonds;\r\n    let add = true;\r\n    if(newDia == 'delete'){\r\n      delete newDiamonds[id]\r\n    } else {\r\n      for (let [key, value] of Object.entries(diamonds)) {\r\n        if(key == id){\r\n          newDiamonds[key] = newDia;\r\n          add = false;\r\n          console.log(\"newDiaID\", id)\r\n          break;\r\n        }\r\n      }\r\n      if(add){\r\n        newDiamonds[id] = newDia\r\n      }\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:newDiamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    console.log(\"debugging new diamond platform\", newGameObjects)\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateRoundState = (newRound:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newRounds = rounds;\r\n    let add = true;\r\n    if (newRound == 'delete'){\r\n      delete newRounds[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(rounds)) {\r\n        if(key == id){\r\n          newRounds[key] = newRound;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){newRounds[id] = newRound}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:newRounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateEnemyState = (newEnemy:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newEnemies = enemies;\r\n    let add = true;\r\n    if (newEnemy == 'delete'){\r\n      delete newEnemies[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(rounds)) {\r\n        if(key == id){\r\n          newEnemies[key] = newEnemy;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){id = id + (numEnemy + 1); updateNumEnemy(numEnemy + 1); newEnemies[id] = newEnemy}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:newEnemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let addPlatform = (newPlatform:any, id:string, type:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    if( type == 'round'){\r\n      updateRoundState(newPlatform, id +(numPlat + 1))\r\n    } else if (type == 'diamond'){\r\n      updateDiamondState(newPlatform, id  + (numPlat + 1))\r\n    } else {\r\n      updateCapsuleState(newPlatform, id  + (numPlat + 1))\r\n    }\r\n  }\r\n  let updateNumPlat = (n:number) => {\r\n    updateNumPlatApp(n);\r\n  }\r\n  let updateNumEnemy = (n:number) => {\r\n    updateNumEnemyApp(n);\r\n  }\r\n  //list of components initially, will always have a door, world, and avatar, avatar not implemented yet\r\n  const [componentList, setComponentList] = useState<any>([\r\n    <AddButton updateNumPlat = {updateNumPlat} numPlat = {numPlat} key = {'add'} gameObjects ={gameObjects} updateEnemy = {updateEnemyState} updateTurret = {updateTurretState} updatePlatform ={addPlatform}></AddButton>,\r\n    <World key = {JSON.stringify(gameObjects) + \" world\"} info = {gameObjects.world} update = {updateWorldState} selected = {selected}></World>,\r\n    <Door world = {gameObjects.world} key = {JSON.stringify(gameObjects) + \" door\"} info = {gameObjects.door} update = {updateDoorState} selected = {selected}></Door>,\r\n    <Avatar world = {gameObjects.world} key = {JSON.stringify(gameObjects) + \" avatar\"} info = {gameObjects.avatar} update = {updateAvatarState} selected = {selected}></Avatar>,\r\n    ]\r\n    )\r\n  let components = componentList;\r\n  for (let [key, value] of Object.entries(gameObjects.turrets)) {\r\n    components.push(<Turret world = {gameObjects.world} key = {key} info = {value} id = {key} update = {updateTurretState} selected = {selected}></Turret>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.capsules)) {\r\n    components.push(<Capsule world = {gameObjects.world} key = {key + Math.random()} info = {value} id = {key} update = {updateCapsuleState} selected = {selected}></Capsule>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.diamonds)) {\r\n    components.push(<Diamond world = {gameObjects.world} key = {key + Math.random()} info = {value} id = {key} update = {updateDiamondState} selected = {selected}></Diamond>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.rounds)) {\r\n    components.push(<Round world = {gameObjects.world} key = {key + Math.random()} info = {value} id = {key} update = {updateRoundState} selected = {selected}></Round>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.enemies)) {\r\n    components.push(<Enemy world = {gameObjects.world} key = {key} info = {value} id = {key} update = {updateEnemyState} selected = {selected}></Enemy>);\r\n  }\r\n  // <Turret key = {JSON.stringify(gameObjects) + 'turret'} info = {gameObjects.turrets.turret1} id = 'turret1' update = {updateTurretState} selected = {selected}></Turret>\r\n  return (\r\n    <div className=\"ItemDashboard\" style = {windowStyling}>\r\n        {components}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItemDashboard;\r\n","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\nimport Draggable from 'react-draggable'; // The default\r\nimport {DraggableCore} from 'react-draggable'; // <DraggableCore>\r\nimport { url } from 'inspector';\r\nimport Circle from './Circle'\r\n\r\ninterface Props {\r\n    texturePres?: string\r\n    texturePast?: string\r\n    idInput: string\r\n    posInput: Array<number>\r\n    updatePosInput: (a:Array<number>, idUpdate:string) => void\r\n    centered:boolean\r\n    scaleY: number\r\n    scaleX: number\r\n    lineX1?:number\r\n    lineY1?:number\r\n    lineX2?:number\r\n    lineY2?:number\r\n}\r\n\r\n\r\nconst LevelWindowItem : React.FC<Props> = ({texturePres,texturePast,idInput,posInput,updatePosInput, centered, scaleY, scaleX, lineX1, lineY1, lineX2, lineY2}) => {\r\n  const [id, setId] = useState<string>(idInput);\r\n  const [height,setHeight] = useState(90)\r\n  const [width,setWidth] = useState(90)\r\n  let temp:any;\r\n  let x1 = (typeof lineX1 !== undefined) ? lineX1 : 0\r\n  let x2 = (typeof lineX2 !== undefined) ? lineX2 : 10\r\n  let y1 = (typeof lineY1 !== undefined) ? lineY1 : 0\r\n  let y2 = (typeof lineY2 !== undefined) ? lineY2 : 10\r\n  // let x1 = 0\r\n  // let x2 = 10\r\n  // let y1 = 0\r\n  // let y2 = 10\r\n  let coords = {x1,x2,y1,y2}\r\n  // let pxToGameCoord = (px:Array<number>) => {\r\n  //   return [px[0] * world.bounds[0] / 1200, px[1] * world.bounds[1] / 600]\r\n  // }\r\n  // let testheight:number | undefined= 90;\r\n  // let wrap = (n:number) => {\r\n  //   testheight = n\r\n  // }\r\n  return (\r\n    // updatePosInput takes a list of the new position values (calculated by adding drag pos to current pos) and name of the component\r\n    // .008 * 600/18\r\n    <div>\r\n    <Draggable onStop = {(e,data) => updatePosInput([(posInput[0] + data.x),posInput[1] - data.y], idInput)}>\r\n        <img ref = {el => temp = el} src = {\"./assets/\" + texturePres +\".png\"} style = {{width: width * scaleX, height: height * scaleY +'px', position:'absolute', left:centered ? posInput[0] - width*scaleX/2 : posInput[0], bottom:centered ? posInput[1] - height*scaleY/2 : posInput[1]}}\r\n          onLoad={(e) => {setWidth(temp.naturalWidth); setHeight(temp.naturalHeight);}}></img>\r\n    </Draggable>\r\n    <div style = {{zIndex: -1, width: width * scaleX + 'px', height: height * scaleY +'px', position:'absolute', left:centered ? posInput[0] - width*scaleX/2 : posInput[0] + 'px', bottom:posInput[1]+20+'px'}}>\r\n      <svg>\r\n        <line {...coords} stroke = \"black\" strokeWidth = '2'></line>\r\n      </svg>\r\n    </div>\r\n    {/* <Draggable onStop = {(e,data) => updatePosInput([(posInput[0] + data.x),posInput[1] - data.y], idInput)}>\r\n        <img ref = {el => temp = el} src = {\"/assets/\" + texturePres +\".png\"} style = {{position:'absolute', left:posInput[0], bottom: posInput[1]}}\r\n         ></img>\r\n    </Draggable> */}\r\n    </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default LevelWindowItem;","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\nimport Draggable from 'react-draggable'; // The default\r\nimport {DraggableCore} from 'react-draggable'; // <DraggableCore>\r\nimport { url } from 'inspector';\r\nimport LevelWindowItem from './LevelWindowItem';\r\nimport Door from './Door';\r\n\r\n// import avatar from \"/assets/avatar.png\"\r\ninterface Props {\r\n    backgroundPastPath: string\r\n    backgroundPresPath: string\r\n    gameObjectState: any\r\n    updateState: (s:any) => any\r\n}\r\n\r\n// 'url(\"/assets/past_room2.png\")'\r\nconst windowStyling : CSS.Properties= {\r\n    height: '600px',\r\n    minHeight:'600px',\r\n    minWidth: '1000px',\r\n    width: '1200px',\r\n    float: 'left',\r\n    color: '#000000',\r\n    position: 'relative'\r\n}\r\n\r\nconst LevelWindow : React.FC<Props> = ({backgroundPastPath, backgroundPresPath, gameObjectState,updateState}) => {\r\n  const[gameObjects, setGameObjects] = useState(gameObjectState)\r\n  let world = gameObjectState.world\r\n  let avatar = gameObjectState.avatar\r\n  let door = gameObjectState.door\r\n  let turrets = gameObjectState.turrets\r\n  let capsules = gameObjects.capsules\r\n  let diamonds = gameObjects.diamonds\r\n  let rounds = gameObjects.rounds\r\n  let enemies = gameObjects.enemies\r\n\r\n  //takes an array representing a position in game coordinates and converts to array of pixel coordinates\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n\r\n  //takes an array representing a position in pixels and converts to array of game coordinates\r\n  let pxToGameCoord = (px:Array<number>) => {\r\n    return [px[0] * world.bounds[0] / 1000, px[1] * world.bounds[1] / 600]\r\n  }\r\n  let updatePos = (p:Array<number>, id:string) =>{\r\n    p = pxToGameCoord(p)\r\n    if(id == 'door'){\r\n      // let { size, bodyType,density,friction,restitution,texturePres,texturePast } = gameObjectState.door\r\n      door.pos = p\r\n    } else if (id == 'avatar'){\r\n      avatar.pos = p\r\n    } else if (id.includes('turret')){\r\n      for (let [key, value] of Object.entries(turrets)){\r\n        if(key == id){\r\n          turrets[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('diamond')){\r\n      for (let [key, value] of Object.entries(diamonds)){\r\n        if(key == id){\r\n          diamonds[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('round')){\r\n      for (let [key, value] of Object.entries(rounds)){\r\n        if(key == id){\r\n          rounds[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('capsule')){\r\n      for (let [key, value] of Object.entries(capsules)){\r\n        if(key == id){\r\n          capsules[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('enemy')){\r\n      for (let [key, value] of Object.entries(enemies)){\r\n        if(key == id){\r\n          enemies[key].pos = p;\r\n        }\r\n      }\r\n    }\r\n    let newGS = {\r\n      world:world,\r\n      avatar: avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies\r\n    }\r\n    setGameObjects(newGS)\r\n    updateState(newGS)\r\n  }\r\n  let coords = {\r\n    x1: 0,\r\n    y1: 0,\r\n    x2: 10,\r\n    y2: 10\r\n  }\r\n  // rescale formular platform height =  .008 * 600/world.bounds[1]\r\n  let windowItems = [\r\n    <LevelWindowItem scaleX = {.03 * 1000/ world.bounds[0]} scaleY = {.03 * 600 / world.bounds[1]} centered = {true} key = {\"door\"} texturePres = {gameObjectState.door.texture} idInput = \"door\" posInput = {gameCoordToPx(gameObjectState.door.pos)} updatePosInput = {updatePos}></LevelWindowItem>,\r\n    <LevelWindowItem scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600 / world.bounds[1]} centered = {true} key = {\"avatar\"} texturePres = {gameObjectState.avatar.texture} idInput = \"avatar\" posInput = {gameCoordToPx(gameObjectState.avatar.pos)} updatePosInput = {updatePos}></LevelWindowItem>\r\n  ]\r\n  for (let [key, value] of Object.entries(turrets)) {\r\n    windowItems.push(<LevelWindowItem lineX1 = {turrets[key].pos[0] + turrets[key].direction[0]*20}  lineX2 = {turrets[key].pos[0]} lineY2 = {turrets[key].pos[1]} lineY1 = {turrets[key].pos[1] + turrets[key].direction[1] * 20} scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {turrets[key].texture} idInput = {key} posInput = {gameCoordToPx(turrets[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n    // windowItems.push(<div style = {{zIndex:-1, position:'absolute' as 'absolute', left:gameCoordToPx(turrets[key].pos)[0], bottom:gameCoordToPx(turrets[key].pos)[1]}}><svg height = '60px' width = '160px'>\r\n    //   <line x1 = {turrets[key].pos[0]} y1= {turrets[key].pos[1]} x2 = {turrets[key].pos[0] + turrets[key].direction[0] * 20} y2 = {turrets[key].pos[1] + turrets[key].direction[1]} stroke = \"black\" strokeWidth = '2'></line>\r\n    // </svg></div>);\r\n  }\r\n  for (let [key, value] of Object.entries(capsules)) {\r\n    windowItems.push(< LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {capsules[key].texture} idInput = {key} posInput = {gameCoordToPx(capsules[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(diamonds)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {diamonds[key].texture} idInput = {key} posInput = {gameCoordToPx(diamonds[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(rounds)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {rounds[key].texture} idInput = {key} posInput = {gameCoordToPx(rounds[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(enemies)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600/world.bounds[1]} centered = {true} key = {key} texturePres = {enemies[key].texture} idInput = {key} posInput = {gameCoordToPx(enemies[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  return (\r\n    <div className=\"LevelWindow\" style = {windowStyling}>\r\n      <img style = {{position:'absolute', top:'0px', left:'0px', height:'600px',width:'1000px', zIndex:-10}}src = {\"./assets/\"+ backgroundPastPath+\".png\"}></img>\r\n      {windowItems}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LevelWindow;\r\n","import React, { Fragment, useState } from 'react'\r\nimport './App.css';\r\nimport World from './components/World';\r\nimport ItemDashboard from './components/ItemDashboard';\r\nimport LevelWindow from './components/LevelWindow';\r\nimport Turret from './components/Turret';\r\nimport Door from './components/Door';\r\nimport Avatar from './components/Avatar';\r\n// import uuid from 'uuid';\r\n\r\n//initial json\r\nlet levelInit = {\r\n  world: {\r\n    gravity: -14.7,\r\n    bounds: [32.0,18.0],\r\n    backgroundPres: 'present_background',\r\n    backgroundPast: 'past_background',\r\n    diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n    capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n    roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n    density: 0.0,\r\n    heavy_density: 10.0,\r\n    friction: 0.6,\r\n    restitution: 0.1,\r\n    bullet_offset: 0.7,\r\n    effect_volume: 0.8\r\n  },\r\n  capsules: {\r\n    presentcapsule1: {\r\n      name: \"present_capsule\",\r\n      pos: [\r\n        3.0,\r\n        7.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_capsule\",\r\n      space: 1\r\n    },\r\n    pastcapsule1: {\r\n      name: \"past_capsule\",\r\n      pos: [\r\n        4.5,\r\n        1.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_capsule\",\r\n      space: 2\r\n    }\r\n  },\r\n  diamonds: {\r\n    presentdiamond1: {\r\n      name: \"present_diamond\",\r\n      pos: [\r\n        1.0,\r\n        2.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_diamond\",\r\n      space: 1\r\n    },\r\n    pastdiamond1: {\r\n      name: \"past_diamond\",\r\n      pos: [\r\n        13.5,\r\n        3.5\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_diamond\",\r\n      space: 2\r\n    },\r\n    pastdiamond2: {\r\n      name: \"past_diamond\",\r\n      pos: [\r\n        20.0,\r\n        5.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_diamond\",\r\n      space: 2\r\n    }\r\n  },\r\n  rounds: {\r\n    presentround1: {\r\n      name: \"present_round\",\r\n      pos: [11.5, 2.0],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_round\",\r\n      space: 1\r\n    },\r\n    presentround2: {\r\n      name: \"present_round\",\r\n      pos: [ 9.5, 13.0 ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_round\",\r\n      space: 1\r\n    },\r\n    pastround1: {\r\n      name: \"past_round\",\r\n      pos: [ 2.0, 13.0 ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_round\",\r\n      space: 2\r\n    },\r\n  },\r\n  enemies: {\r\n    enemy1: {\r\n      pos: [13.0, 6.0],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"enemypresent\",\r\n      entitytype: \"present\",\r\n      cooldown: 120,\r\n      bodytype: \"dynamic\",\r\n      density: 1.0\r\n    },\r\n    enemy2: {\r\n      pos: [15.625, 11.03125],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"enemypast\",\r\n      entitytype: \"past\",\r\n      cooldown: 120,\r\n      bodytype: \"dynamic\",\r\n      density: 1.0\r\n    }\r\n  },\r\n  avatar: {\r\n    pos: [2.5, 5.0],\r\n    shrink: [0.0216,0.01125],\r\n    texture: 'dude',\r\n    density: 1.0,\r\n    bodytype: 'dynamic',\r\n    avatarstanding: 'avatarstanding',\r\n    avatarcrouching: 'avatarcrouching',\r\n    avatardashing: 'avatardashing',\r\n    avatarfalling: 'avatarfalling'\r\n  },\r\n  door: {\r\n    pos: [29.5, 15.5],\r\n    size: [1.92, 1.92],\r\n    bodytype: 'static',\r\n    density: 0.0,\r\n    friction: 0.0,\r\n    restitution: 0.0,\r\n    texture: 'goal',\r\n    sensor: true,\r\n    nextlevel: 0,\r\n    space: 3\r\n  },\r\n  turrets: {\r\n    turret1: {\r\n      pos: [18.5,10.3],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"turret\",\r\n      entitytype: \"present\",\r\n      cooldown: 360,\r\n      direction: [-3.0, 0.0],\r\n      bodytype: \"static\",\r\n      density: 1.0\r\n    },\r\n    turret2: {\r\n      pos: [8.5, 5.0],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"turret\",\r\n      entitytype: \"past\",\r\n      cooldown: 480,\r\n      direction: [0.0, 2.0],\r\n      bodytype: \"static\",\r\n      density: 1.0\r\n    }\r\n  }\r\n};\r\n\r\n//styling for container holding Level Window and ItemDashboard\r\nconst containerStyling = {\r\n  height: '600px',\r\n  minWidth: '1000px',\r\n  // width: '100vw',\r\n  display: 'flex'\r\n}\r\n\r\n//styling for this\r\nconst headerStyling = {\r\n  minHeight: '30px',\r\n  height: '30px',\r\n  width: '100%',\r\n  display: 'inline-block',\r\n  padding:0\r\n}\r\n\r\n//downloads state info as a json called export\r\nfunction exportToJson(objectData: JSON) {\r\n  let filename = \"export.json\";\r\n  let contentType = \"application/json;charset=utf-8;\";\r\n  if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n    var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], { type: contentType });\r\n    navigator.msSaveOrOpenBlob(blob, filename);\r\n  } else {\r\n    var a = document.createElement('a');\r\n    a.download = filename;\r\n    a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\r\n    a.target = '_blank';\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n  }\r\n}\r\n\r\n\r\nconst App : React.FC = ({}) => {\r\n  \r\n  const [world, setWorld] = useState(levelInit.world);\r\n  const [avatar, setAvatar] = useState(levelInit.avatar);\r\n  const [door, setDoor] = useState(levelInit.door);\r\n  const [turrets, setTurrets] = useState(levelInit.turrets);\r\n  const [capsules, setCapsules] = useState(levelInit.capsules);\r\n  const [diamonds, setDiamonds] = useState(levelInit.diamonds);\r\n  const [rounds, setRounds] = useState(levelInit.rounds);\r\n  const [enemies, setEnemies] = useState(levelInit.enemies);\r\n  const [gameObjects, setGameObjects] = useState<any>(levelInit); //represents json, init with levelinit\r\n  const [numPlat, setNumPlat] = useState(9);\r\n  const [numEnemy, setNumEnemy] = useState(5);\r\n  const [objectPostitions, setOp] = useState(new Object()) // not used yet\r\n\r\n\r\n  let editorObjects = useState([{id:'world', selected: false}]); //not used yet\r\n\r\n  let updateState = (newState:any) => { // updates state\r\n    let {world, capsules, diamonds, rounds, enemies, avatar, door, turrets} = newState;\r\n    setWorld(world);\r\n    setAvatar(avatar);\r\n    setDoor(door);\r\n    setTurrets(turrets);\r\n    setEnemies(enemies)\r\n    setCapsules(capsules)\r\n    setDiamonds(diamonds)\r\n    setRounds(rounds)\r\n    setGameObjects(newState);\r\n  }\r\n  let selectComponent = (id:string, open:boolean) => { //not used for anything yet\r\n    editorObjects.map(\r\n      (item:any) => {\r\n        if(item.id == id){\r\n          item.selected = true;\r\n        }else{\r\n          item.selected = false;\r\n        }\r\n    })\r\n  }\r\n  let updateNumPlat = (n:number) => {\r\n    setNumPlat(n);\r\n  }\r\n  let updateNumEnemy = (n:number) => {\r\n    setNumEnemy(n);\r\n  }\r\n  //used for debugging and formatting json during download\r\n  \r\n  // gravity: -14.7,\r\n  // bounds: [32.0,18.0],\r\n  // \"present_background\": \"present_background\",\r\n  // \"past_background\": \"past_background\",\r\n  // diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n  // capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n  // roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n  // density: 0.0,\r\n  // heavy_density: 10.0,\r\n  // friction: 0.6,\r\n  // restitution: 0.1,\r\n  // bullet_offset: 0.7,\r\n  // effect_volume: 0.8\r\n  let tester = {\r\n    gravity: world.gravity,\r\n    bounds: world.bounds,\r\n    present_background: world.backgroundPres,\r\n    past_background: world.backgroundPast,\r\n    diamondshape: world.diamondshape,\r\n    capsuleshape: world.capsuleshape,\r\n    roundshape: world.roundshape,\r\n    density: world.density,\r\n    heavy_density: world.heavy_density,\r\n    friction: world.friction,\r\n    restitution: world.restitution,\r\n    bullet_offset: world.bullet_offset,\r\n    effect_volume: world.effect_volume,\r\n    door,\r\n    avatar,\r\n    turrets,\r\n    capsules,\r\n    diamonds,\r\n    rounds,\r\n    enemies\r\n  }\r\n  \r\n  let reader = new FileReader()\r\n  reader.onload = function(e:any) {\r\n    let newJSON:any = JSON.parse(JSON.parse(JSON.stringify(e.target.result,null,2)))\r\n    console.log('newjson',newJSON)\r\n    let {gravity, bounds, present_background, past_background, diamondshape, capsuleshape, roundshape}:any = newJSON\r\n    let reformat = {\r\n      world:{\r\n        gravity: gravity,\r\n        bounds:bounds,\r\n        backgroundPres:present_background,\r\n        backgroundPast:past_background,\r\n        diamondshape:diamondshape,\r\n        capsuleshape:capsuleshape,\r\n        roundshape:roundshape\r\n      },\r\n      door:newJSON.door,\r\n      avatar:newJSON.avatar,\r\n      turrets:newJSON.turrets,\r\n      capsules:newJSON.capsules,\r\n      diamonds:newJSON.diamonds,\r\n      rounds:newJSON.rounds,\r\n      enemies:newJSON.enemies\r\n    }\r\n    updateState(reformat);\r\n    \r\n  }\r\n  return (\r\n    <div className=\"App\" >\r\n      <div className=\"App-header\" style = {headerStyling} >\r\n        <button onClick= {() => exportToJson(JSON.parse(JSON.stringify(tester)))} style = {{marginLeft: '20px',height:'20px', fontSize:'7pt'}}>Download</button>\r\n        {/* <input style = {{marginLeft: '20px', height:'20px', fontSize:'7pt'}} type=\"file\" name=\"file\" onChange={(e:any) => {reader.readAsText(e.target.files[0])}}/> */}\r\n      </div>\r\n      <div style = {containerStyling}>\r\n        <LevelWindow key = {JSON.stringify(gameObjects) + \"lw\"} backgroundPastPath = {world.backgroundPast} backgroundPresPath = {world.backgroundPres} \r\n          gameObjectState = {gameObjects} updateState = {updateState}></LevelWindow>\r\n        <ItemDashboard updateNumEnemyApp = {updateNumEnemy} numEnemy = {numEnemy} updateNumPlatApp = {updateNumPlat} numPlat = {numPlat} key = {JSON.stringify(gameObjects)} gameObjectsInput={gameObjects} update={updateState} selected={selectComponent}>\r\n          </ItemDashboard>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import '!style-loader!css-loader!bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}