{"version":3,"sources":["components/Turret.tsx","components/World.tsx","components/Door.tsx","components/Avatar.tsx","components/Capsule.tsx","components/Diamond.tsx","components/Round.tsx","components/Enemy.tsx","components/ItemDashboard.tsx","components/LevelWindowItem.tsx","components/LevelWindow.tsx","App.tsx","index.tsx"],"names":["Turret","info","update","selected","id","useState","isOpen","setIsOpen","pos","shrink","texture","entitytype","cooldown","direction","bodytype","density","posState","shrinkState","textureState","densityState","bodytypeState","entitytypeState","cooldownState","directionState","updatedState","ButtonGroup","Button","color","onClick","style","marginBottom","isOpened","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onBlur","e","target","value","defaultValue","World","gravity","bounds","backgroundPres","backgroundPast","diamondshape","capsuleshape","roundshape","heavy_density","friction","restitution","bullet_offset","effect_volume","gravityState","boundsState","backgroundPastState","backgroundPresState","diamondshapeState","capsuleshapeState","roundshapeState","densityShape","heavy_densityState","frictionState","restitutionState","bullet_offsetState","effect_volumeState","Door","size","sensor","nextlevel","space","console","log","sizeState","sensorState","nextlevelState","spaceState","default","Value","toString","Avatar","avatarstanding","avatarcrouching","avatardashing","avatarfalling","avatarstandingState","avatarcrouchingState","avatardashingState","avatarfallingState","Capsule","name","nameState","resitution","Diamond","Round","Enemy","windowStyling","height","width","background","display","float","overflow","ItemDashboard","gameObjectsInput","JSON","parse","stringify","gameObjects","setGameObjects","avatar","door","turrets","diamonds","rounds","enemies","capsules","updateTurretState","newTurr","world","newTurrets","Object","entries","key","newGameObjects","updateCapsuleState","newCap","newCapsules","updateDiamondState","newDia","newDiamonds","updateRoundState","newRound","newRounds","updateEnemyState","newEnemy","newEnemies","newWorld","newDoor","newAva","componentList","components","push","className","LevelWindowItem","temp","texturePres","idInput","texturePast","posInput","updatePosInput","centered","scaleY","scaleX","setHeight","setWidth","onStop","data","x","y","ref","el","src","position","left","bottom","onLoad","naturalWidth","naturalHeight","minHeight","minWidth","LevelWindow","backgroundPastPath","gameObjectState","backgroundPresPath","updateState","gameCoordToPx","gc","updatePos","p","px","includes","newGS","windowItems","top","zIndex","levelInit","presentcapsule1","pastcapsule1","presentdiamond1","pastdiamond1","pastdiamond2","presentround1","presentround2","pastround1","enemy1","enemy2","turret1","turret2","containerStyling","appStyling","App","setWorld","setAvatar","setDoor","setTurrets","editorObjects","newState","platforms","tester","present_background","past_background","objectData","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","type","a","document","createElement","download","href","encodeURIComponent","body","appendChild","click","removeChild","exportToJson","fontSize","open","map","item","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0165ffdf.chunk.js","sourcesContent":["import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, ButtonGroup, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"turret2\": {\r\n//     \"pos\": [8.5, 5.0],\r\n//     \"shrink\": [0.0168, 0.021375],\r\n//     \"texture\": \"turret\",\r\n//     \"entitytype\": \"past\",\r\n//     \"cooldown\": 480,\r\n//     \"direction\": [0.0, 2.0],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 1.0\r\n//   }\r\n\r\nconst Turret : React.FC<Props> = ({info, update, selected, id}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, entitytype, cooldown, direction, bodytype, density} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let entitytypeState = entitytype\r\n  let cooldownState = cooldown\r\n  let directionState = direction\r\n\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          entitytype:entitytypeState,\r\n          cooldown:cooldownState,\r\n          direction:directionState\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState(), id)}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {entitytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownState = +e.target.value; update(updatedState(), id)}} defaultValue = {cooldown}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Direction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{directionState = [+e.target.value, direction[1]]; update(updatedState(), id)}} defaultValue = {direction[0]}/>\r\n            <Input onBlur={(e) =>{directionState = [direction[0], +e.target.value]; update(updatedState(), id)}} defaultValue = {direction[1]}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Turret;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n\r\n// gravity: -14.7,\r\n//     bounds: [32.0,18.0],\r\n//     backgroundPres: 'present_background',\r\n//     backgroundPast: 'past_background',\r\n//     diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n//     capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n//     roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n//     density: 0.0,\r\n//     heavy_density: 10.0,\r\n//     friction: 0.6,\r\n//     restitution: 0.1,\r\n//     bullet_offset: 0.7,\r\n//     effect_volume: 0.8\r\nconst World : React.FC<Props> = ({info, update,selected}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {gravity, bounds, backgroundPres, backgroundPast, diamondshape, capsuleshape, roundshape, density, heavy_density, friction, restitution, bullet_offset, effect_volume} = info\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  let gravityState = gravity\r\n  let boundsState = bounds\r\n  let backgroundPastState = backgroundPast\r\n  let backgroundPresState = backgroundPres\r\n  let diamondshapeState = diamondshape\r\n  let capsuleshapeState = capsuleshape \r\n  let roundshapeState = roundshape\r\n  let densityShape = density\r\n  let heavy_densityState = heavy_density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let bullet_offsetState = bullet_offset\r\n  let effect_volumeState = effect_volume\r\n  \r\n  let updatedState = () => {\r\n    return {\r\n        gravity:gravityState,\r\n        bounds:boundsState,\r\n        backgroundPast:backgroundPastState,\r\n        backgroundPres: backgroundPresState,\r\n        diamondshape: diamondshapeState,\r\n        capsuleshape: capsuleshapeState,\r\n        roundshape: roundshapeState,\r\n        density: densityShape,\r\n        heavy_density: heavy_densityState,\r\n        friction: frictionState,\r\n        restitution: restitutionState,\r\n        bullet_offset: bullet_offsetState,\r\n        effect_volume: effect_volumeState\r\n    }\r\n}\r\n\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ marginBottom: '1rem' }}>World</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Gravity</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{gravityState = +e.target.value; update(updatedState())}} defaultValue={gravity} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Bounds</InputGroupText>\r\n          </InputGroupAddon>\r\n          {/* TODO: change bounds input  */}\r\n          <Input onBlur={e =>{boundsState = [+e.target.value,boundsState[1]]; update(updatedState())}} defaultValue={bounds[0]} />\r\n          <Input onBlur={e =>{boundsState = [boundsState[0], +e.target.value]; update(updatedState())}} defaultValue = {bounds[1]} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Past Background</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPastState = e.target.value; update(updatedState())}} defaultValue={backgroundPast} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Pres Background</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPresState = e.target.value; update(updatedState())}} defaultValue={backgroundPres} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Bullet Offset</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{bullet_offsetState = +e.target.value; update(updatedState())}} defaultValue={bullet_offset} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Effect Volume</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{effect_volumeState = +e.target.value; update(updatedState())}} defaultValue={effect_volume} />\r\n        </InputGroup>\r\n        {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Diamond Shape</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPresState = e.target.value; update(updatedState())}} defaultValue={backgroundPres} />\r\n        </InputGroup> */}\r\n        \r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default World;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n}\r\n\r\n// \"door\": {\r\n//   \"pos\": [\r\n//     29.5,\r\n//     15.5\r\n//   ],\r\n//   \"size\": [\r\n//     1.6,\r\n//     1.6\r\n//   ],\r\n//   \"texture\": \"goal\",\r\n//   \"bodytype\": \"static\",\r\n//   \"density\": 0.0,\r\n//   \"friction\": 0.0,\r\n//   \"restitution\": 0.0,\r\n//   \"sensor\": true,\r\n//   \"nextlevel\": 0,\r\n//   \"space\": 3\r\nconst Door : React.FC<Props> = ({info, update,selected}) => {\r\n  const{ pos, size, bodytype, density, friction, restitution, texture, sensor, nextlevel, space} = info\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  console.log(sensor);\r\n  let posState = pos\r\n  let sizeState = size\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let sensorState = sensor\r\n  let nextlevelState = nextlevel\r\n  let spaceState = space\r\n\r\n  let updatedState = () => {\r\n    return {\r\n      pos:posState,\r\n      size:sizeState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      restitution:restitutionState,\r\n      texture:textureState,\r\n      sensor:sensorState,\r\n      nextlevel:nextlevelState,\r\n      space:spaceState\r\n    }\r\n\r\n  }\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n    selected('door', isOpen);\r\n  }\r\n  ;\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"door\" style={{ marginBottom: '1rem' }}>Door</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position(x,y)</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{posState[0] = +e.target.value; update(updatedState())}} default Value = {pos[0]}/>\r\n          <Input onBlur={e =>{posState[1] = +e.target.value; update(updatedState())}} default Value = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Size</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{sizeState[0] = +e.target.value; update(updatedState())}} default Value = {size[0]}/>\r\n          <Input onBlur={e =>{sizeState[1] = +e.target.value; update(updatedState())}} default Value = {size[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{bodytypeState = e.target.value; update(updatedState())}} default Value = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{densityState = +e.target.value; update(updatedState())}} default Value = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{frictionState = +e.target.value; update(updatedState())}} default Value = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{restitutionState = +e.target.value; update(updatedState())}} default Value = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{textureState = e.target.value; update(updatedState())}} default Value = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Sensor</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{sensorState = (e.target.value == 'true'); update(updatedState())}} default Value = {sensor.toString()}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Next Level</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{nextlevelState = +e.target.value; update(updatedState())}} default Value = {nextlevel}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{spaceState = e.target.value; update(updatedState())}} default Value = {space}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Door;\r\n\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n // \"pos\": [2.5,5.0],/\r\n  //   \"shrink\": [0.0216,0.01125],/\r\n  //   \"texture\": \"dude\",\r\n  //   \"density\": 1.0,\r\n  //   \"bodytype\": \"dynamic\", /\r\n  //   \"avatarstanding\": \"avatarstanding\",\r\n  //   \"avatarcrouching\": \"avatarcrouching\",\r\n  //   \"avatardashing\": \"avatardashing\",\r\n  //   \"avatarfalling\": \"avatarfalling\"\r\n\r\nconst Avatar : React.FC<Props> = ({info, update,selected}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, density, bodytype, avatarstanding, avatarcrouching, avatardashing, avatarfalling} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let avatarstandingState = avatarstanding\r\n  let avatarcrouchingState = avatarcrouching\r\n  let avatardashingState = avatardashing\r\n  let avatarfallingState = avatarfalling\r\n\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          avatarstanding: avatarstandingState,\r\n          avatarcrouching: avatarcrouchingState,\r\n          avatardashing: avatardashingState,\r\n          avatarfalling: avatarfallingState\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ marginBottom: '1rem' }}>Avatar</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState())}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState())}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState())}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState())}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState())}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState())}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState())}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState())}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState())}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Standing</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarstandingState = e.target.value; update(updatedState())}} defaultValue = {avatarfalling}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Crouching</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarcrouchingState = e.target.value; update(updatedState())}} defaultValue = {avatarcrouching}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Dashing</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatardashingState = e.target.value; update(updatedState())}} defaultValue = {avatardashing}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Falling</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarfallingState = e.target.value; update(updatedState())}} defaultValue = {avatarfalling}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Avatar;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentcapsule1\": {\r\n//     \"name\": \"present_capsule\",\r\n//     \"pos\": [\r\n//       3.0,\r\n//       7.0\r\n//     ],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_capsule\",\r\n//     \"space\": 1\r\n//   }\r\n\r\nconst Capsule : React.FC<Props> = ({info, update, selected, id}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('capsule', isOpen);\r\n  };\r\n  console.log(\"capsule\" ,info);\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"capsule\" style={{ marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Capsule;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentdiamond2\": {\r\n//     \"name\": \"present_diamond\",\r\n//     \"pos\": [\r\n//       11.0,\r\n//       7.0\r\n//     ],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_diamond\",\r\n//     \"space\": 1\r\n//   },\r\n\r\nconst Diamond : React.FC<Props> = ({info, update, selected, id}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Diamond;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentround1\": {\r\n//     \"name\": \"present_round\",\r\n//     \"pos\": [11.5, 2.0],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_round\",\r\n//     \"space\": 1\r\n//   },\r\n\r\nconst Round : React.FC<Props> = ({info, update, selected, id}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Round;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, ButtonGroup, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"enemy1\": {\r\n//     \"pos\": [13.0, 6.0],\r\n//     \"shrink\": [0.0168, 0.021375],\r\n//     \"texture\": \"enemypresent\",\r\n//     \"entitytype\": \"present\",\r\n//     \"cooldown\": 120,\r\n//     \"bodytype\": \"dynamic\",\r\n//     \"density\": 1.0\r\n//   },\r\nconst Enemy : React.FC<Props> = ({info, update, selected, id}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, entitytype, cooldown, bodytype, density} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let entitytypeState = entitytype\r\n  let cooldownState = cooldown\r\n\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          entitytype:entitytypeState,\r\n          cooldown:cooldownState,\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState(), id)}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {entitytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownState = +e.target.value; update(updatedState(), id)}} defaultValue = {cooldown}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Enemy;\r\n","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\n// import GameObject  from './GameObject';\r\nimport Turret from './Turret';\r\nimport World from './World';\r\nimport Door from './Door';\r\nimport Avatar from './Avatar';\r\nimport Capsule from './Capsule';\r\nimport Diamond from './Diamond';\r\nimport Round from './Round';\r\nimport Enemy from './Enemy';\r\n\r\ninterface Props {\r\n    gameObjectsInput: any;\r\n    update: (data:any) => void;\r\n    selected: (id:string, open:boolean) => void;\r\n}\r\n\r\n// interface GameObjectType{\r\n//   name: string,\r\n//   jsonitem: Object\r\n// }\r\nconst objectTypes = ['world', 'turret']\r\nconst windowStyling : CSS.Properties= {\r\n    height: '100%',\r\n    width: '100%',\r\n    background: '#aaaaaa',\r\n    display: 'inline-block',\r\n    float: 'right',\r\n    overflow: 'scroll'\r\n}\r\n// function createTurret(p:Array<number>){\r\n//   return <Turret pos = {p} updatefn = {updateTurret}></Turret>;\r\n// }\r\n\r\nconst ItemDashboard : React.FC<Props> = ({gameObjectsInput, update, selected}) => {\r\n  const [gameObjects, setGameObjects] = useState<any>(JSON.parse(JSON.stringify(gameObjectsInput)));\r\n  let {avatar, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n  //updates in App the state assuming world was changed\r\n  let updateWorldState = (newWorld:any) => {\r\n    \r\n    let newGameObjects = {\r\n      world:newWorld,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects);\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //updates Apps state assuming door was changed\r\n  let updateDoorState = (newDoor:any) => {\r\n    let {world, avatar, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:newDoor,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //updates Apps state assuming avatar was changed\r\n  let updateAvatarState = (newAva:any) => {\r\n    let {world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:newAva,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateTurretState = (newTurr:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newTurrets = turrets;\r\n    if( newTurr == 'delete'){\r\n      delete newTurrets[id]\r\n    }else {\r\n      for (let [key, value] of Object.entries(turrets)) {\r\n        if(key == id){\r\n          newTurrets[key] = newTurr;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:newTurrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n\r\n  let updateCapsuleState = (newCap:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newCapsules = capsules;\r\n    if(newCap == 'delete'){\r\n      delete newCapsules[id]\r\n    } else {\r\n      for (let [key, value] of Object.entries(capsules)) {\r\n        if(key == id){\r\n          newCapsules[key] = newCap;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:newCapsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateDiamondState = (newDia:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newDiamonds = diamonds;\r\n    if(newDia = 'delete'){\r\n      delete newDiamonds[id]\r\n    } else {\r\n      for (let [key, value] of Object.entries(diamonds)) {\r\n        if(key == id){\r\n          newDiamonds[key] = newDia;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:newDiamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateRoundState = (newRound:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newRounds = rounds;\r\n    if (newRound == 'delete'){\r\n      delete newRounds[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(rounds)) {\r\n        if(key == id){\r\n          newRounds[key] = newRound;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:newRounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateEnemyState = (newEnemy:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newEnemies = enemies;\r\n    if (newEnemy == 'delete'){\r\n      delete newEnemies[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(rounds)) {\r\n        if(key == id){\r\n          newEnemies[key] = newEnemy;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:newEnemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //list of components initially, will always have a door, world, and avatar, avatar not implemented yet\r\n  const [componentList, setComponentList] = useState<any>([\r\n    <World key = {JSON.stringify(gameObjects) + \" world\"} info = {gameObjects.world} update = {updateWorldState} selected = {selected}></World>,\r\n    <Door key = {JSON.stringify(gameObjects) + \" door\"} info = {gameObjects.door} update = {updateDoorState} selected = {selected}></Door>,\r\n    <Avatar key = {JSON.stringify(gameObjects) + \" avatar\"} info = {gameObjects.avatar} update = {updateAvatarState} selected = {selected}></Avatar>,\r\n    ]\r\n    )\r\n  let components = componentList;\r\n  for (let [key, value] of Object.entries(gameObjects.turrets)) {\r\n    components.push(<Turret key = {key} info = {value} id = {key} update = {updateTurretState} selected = {selected}></Turret>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.capsules)) {\r\n    components.push(<Capsule key = {key} info = {value} id = {key} update = {updateCapsuleState} selected = {selected}></Capsule>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.diamonds)) {\r\n    components.push(<Diamond key = {key} info = {value} id = {key} update = {updateDiamondState} selected = {selected}></Diamond>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.rounds)) {\r\n    components.push(<Round key = {key} info = {value} id = {key} update = {updateRoundState} selected = {selected}></Round>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.enemies)) {\r\n    components.push(<Enemy key = {key} info = {value} id = {key} update = {updateEnemyState} selected = {selected}></Enemy>);\r\n  }\r\n  // <Turret key = {JSON.stringify(gameObjects) + 'turret'} info = {gameObjects.turrets.turret1} id = 'turret1' update = {updateTurretState} selected = {selected}></Turret>\r\n  return (\r\n    <div className=\"ItemDashboard\" style = {windowStyling}>\r\n        {components}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItemDashboard;\r\n","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\nimport Draggable from 'react-draggable'; // The default\r\nimport {DraggableCore} from 'react-draggable'; // <DraggableCore>\r\nimport { url } from 'inspector';\r\n\r\n// import avatar from \"/assets/avatar.png\"\r\ninterface Props {\r\n    texturePres?: string\r\n    texturePast?: string\r\n    idInput: string\r\n    posInput: Array<number>\r\n    updatePosInput: (a:Array<number>, idUpdate:string) => void\r\n    centered:boolean\r\n    scaleY: number\r\n    scaleX: number\r\n}\r\n\r\n// 'url(\"/assets/past_room2.png\")'\r\n\r\nconst LevelWindowItem : React.FC<Props> = ({texturePres,texturePast,idInput,posInput,updatePosInput, centered, scaleY, scaleX}) => {\r\n  const [id, setId] = useState<string>(idInput);\r\n  const [height,setHeight] = useState(90)\r\n  const [width,setWidth] = useState(90)\r\n  let temp:any;\r\n  // let pxToGameCoord = (px:Array<number>) => {\r\n  //   return [px[0] * world.bounds[0] / 1200, px[1] * world.bounds[1] / 600]\r\n  // }\r\n  // let testheight:number | undefined= 90;\r\n  // let wrap = (n:number) => {\r\n  //   testheight = n\r\n  // }\r\n  return (\r\n    // updatePosInput takes a list of the new position values (calculated by adding drag pos to current pos) and name of the component\r\n    // .008 * 600/18\r\n    <div>\r\n    <Draggable onStop = {(e,data) => updatePosInput([(posInput[0] + data.x),posInput[1] - data.y], idInput)}>\r\n        <img ref = {el => temp = el} src = {\"./assets/\" + texturePres +\".png\"} style = {{width: width * scaleX, height: height * scaleY +'px', position:'absolute', left:centered ? posInput[0] - width*scaleX/2 : posInput[0], bottom:centered ? posInput[1] - height*scaleY/2 : posInput[1]}}\r\n          onLoad={(e) => {setWidth(temp.naturalWidth); setHeight(temp.naturalHeight);}}></img>\r\n    </Draggable>\r\n    {/* <Draggable onStop = {(e,data) => updatePosInput([(posInput[0] + data.x),posInput[1] - data.y], idInput)}>\r\n        <img ref = {el => temp = el} src = {\"/assets/\" + texturePres +\".png\"} style = {{position:'absolute', left:posInput[0], bottom: posInput[1]}}\r\n         ></img>\r\n    </Draggable> */}\r\n    </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default LevelWindowItem;","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\nimport Draggable from 'react-draggable'; // The default\r\nimport {DraggableCore} from 'react-draggable'; // <DraggableCore>\r\nimport { url } from 'inspector';\r\nimport LevelWindowItem from './LevelWindowItem';\r\nimport Door from './Door';\r\n\r\n// import avatar from \"/assets/avatar.png\"\r\ninterface Props {\r\n    backgroundPastPath: string\r\n    backgroundPresPath: string\r\n    gameObjectState: any\r\n    updateState: (s:any) => any\r\n}\r\n\r\n// 'url(\"/assets/past_room2.png\")'\r\nconst windowStyling : CSS.Properties= {\r\n    height: '600px',\r\n    minHeight:'600px',\r\n    minWidth: '1000px',\r\n    width: '1200px',\r\n    float: 'left',\r\n    color: '#000000',\r\n    position: 'relative'\r\n}\r\n\r\nconst LevelWindow : React.FC<Props> = ({backgroundPastPath, backgroundPresPath, gameObjectState,updateState}) => {\r\n  const[gameObjects, setGameObjects] = useState(gameObjectState)\r\n  let world = gameObjectState.world\r\n  let avatar = gameObjectState.avatar\r\n  let door = gameObjectState.door\r\n  let turrets = gameObjectState.turrets\r\n  let capsules = gameObjects.capsules\r\n  let diamonds = gameObjects.diamonds\r\n  let rounds = gameObjects.rounds\r\n  let enemies = gameObjects.enemies\r\n\r\n  //takes an array representing a position in game coordinates and converts to array of pixel coordinates\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n\r\n  //takes an array representing a position in pixels and converts to array of game coordinates\r\n  let pxToGameCoord = (px:Array<number>) => {\r\n    return [px[0] * world.bounds[0] / 1000, px[1] * world.bounds[1] / 600]\r\n  }\r\n  let updatePos = (p:Array<number>, id:string) =>{\r\n    p = pxToGameCoord(p)\r\n    if(id == 'door'){\r\n      // let { size, bodyType,density,friction,restitution,texturePres,texturePast } = gameObjectState.door\r\n      door.pos = p\r\n    } else if (id == 'avatar'){\r\n      avatar.pos = p\r\n    } else if (id.includes('turret')){\r\n      for (let [key, value] of Object.entries(turrets)){\r\n        if(key == id){\r\n          turrets[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('diamond')){\r\n      for (let [key, value] of Object.entries(diamonds)){\r\n        if(key == id){\r\n          diamonds[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('round')){\r\n      for (let [key, value] of Object.entries(rounds)){\r\n        if(key == id){\r\n          rounds[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('capsule')){\r\n      for (let [key, value] of Object.entries(capsules)){\r\n        if(key == id){\r\n          capsules[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('enemy')){\r\n      for (let [key, value] of Object.entries(enemies)){\r\n        if(key == id){\r\n          enemies[key].pos = p;\r\n        }\r\n      }\r\n    }\r\n    let newGS = {\r\n      world:world,\r\n      avatar: avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies\r\n    }\r\n    console.log(\"levelwindow\",newGS)\r\n    setGameObjects(newGS)\r\n    updateState(newGS)\r\n       \r\n  }\r\n  // rescale formular platform height =  .008 * 600/world.bounds[1]\r\n  let windowItems = [\r\n    <LevelWindowItem scaleX = {.03 * 1000/ world.bounds[0]} scaleY = {.03 * 600 / world.bounds[1]} centered = {true} key = {\"door\"} texturePres = {gameObjectState.door.texture} idInput = \"door\" posInput = {gameCoordToPx(gameObjectState.door.pos)} updatePosInput = {updatePos}></LevelWindowItem>,\r\n    <LevelWindowItem scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600 / world.bounds[1]} centered = {true} key = {\"avatar\"} texturePres = {gameObjectState.avatar.texture} idInput = \"avatar\" posInput = {gameCoordToPx(gameObjectState.avatar.pos)} updatePosInput = {updatePos}></LevelWindowItem>\r\n  ]\r\n  for (let [key, value] of Object.entries(turrets)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {turrets[key].texture} idInput = {key} posInput = {gameCoordToPx(turrets[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(capsules)) {\r\n    windowItems.push(< LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {capsules[key].texture} idInput = {key} posInput = {gameCoordToPx(capsules[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(diamonds)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {diamonds[key].texture} idInput = {key} posInput = {gameCoordToPx(diamonds[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(rounds)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {rounds[key].texture} idInput = {key} posInput = {gameCoordToPx(rounds[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(enemies)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600/world.bounds[1]} centered = {true} key = {key} texturePres = {enemies[key].texture} idInput = {key} posInput = {gameCoordToPx(enemies[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  return (\r\n    <div className=\"LevelWindow\" style = {windowStyling}>\r\n      <img style = {{position:'absolute', top:'0px', left:'0px', height:'600px',width:'1000px', zIndex:-1}}src = {\"./assets/\"+ backgroundPastPath+\".png\"}></img>\r\n      {windowItems}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LevelWindow;\r\n","import React, { Fragment, useState } from 'react'\r\nimport './App.css';\r\nimport World from './components/World';\r\nimport ItemDashboard from './components/ItemDashboard';\r\nimport LevelWindow from './components/LevelWindow';\r\nimport Turret from './components/Turret';\r\nimport Door from './components/Door';\r\nimport Avatar from './components/Avatar';\r\n// import uuid from 'uuid';\r\n\r\n//initial json\r\nlet levelInit = {\r\n  world: {\r\n    gravity: -14.7,\r\n    bounds: [32.0,18.0],\r\n    backgroundPres: 'present_background',\r\n    backgroundPast: 'past_background',\r\n    diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n    capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n    roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n    density: 0.0,\r\n    heavy_density: 10.0,\r\n    friction: 0.6,\r\n    restitution: 0.1,\r\n    bullet_offset: 0.7,\r\n    effect_volume: 0.8\r\n  },\r\n  capsules: {\r\n    presentcapsule1: {\r\n      name: \"present_capsule\",\r\n      pos: [\r\n        3.0,\r\n        7.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_capsule\",\r\n      space: 1\r\n    },\r\n    pastcapsule1: {\r\n      name: \"past_capsule\",\r\n      pos: [\r\n        4.5,\r\n        1.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_capsule\",\r\n      space: 2\r\n    }\r\n  },\r\n  diamonds: {\r\n    presentdiamond1: {\r\n      name: \"present_diamond\",\r\n      pos: [\r\n        1.0,\r\n        2.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_diamond\",\r\n      space: 1\r\n    },\r\n    pastdiamond1: {\r\n      name: \"past_diamond\",\r\n      pos: [\r\n        13.5,\r\n        3.5\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_diamond\",\r\n      space: 2\r\n    },\r\n    pastdiamond2: {\r\n      name: \"past_diamond\",\r\n      pos: [\r\n        20.0,\r\n        5.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_diamond\",\r\n      space: 2\r\n    }\r\n  },\r\n  rounds: {\r\n    presentround1: {\r\n      name: \"present_round\",\r\n      pos: [11.5, 2.0],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_round\",\r\n      space: 1\r\n    },\r\n    presentround2: {\r\n      name: \"present_round\",\r\n      pos: [ 9.5, 13.0 ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_round\",\r\n      space: 1\r\n    },\r\n    pastround1: {\r\n      name: \"past_round\",\r\n      pos: [ 2.0, 13.0 ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_round\",\r\n      space: 2\r\n    },\r\n  },\r\n  enemies: {\r\n    enemy1: {\r\n      pos: [13.0, 6.0],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"enemypresent\",\r\n      entitytype: \"present\",\r\n      cooldown: 120,\r\n      bodytype: \"dynamic\",\r\n      density: 1.0\r\n    },\r\n    enemy2: {\r\n      pos: [15.625, 11.03125],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"enemypast\",\r\n      entitytype: \"past\",\r\n      cooldown: 120,\r\n      bodytype: \"dynamic\",\r\n      density: 1.0\r\n    }\r\n  },\r\n  avatar: {\r\n    pos: [2.5, 5.0],\r\n    shrink: [0.0216,0.01125],\r\n    texture: 'dude',\r\n    density: 1.0,\r\n    bodytype: 'dynamic',\r\n    avatarstanding: 'avatarstanding',\r\n    avatarcrouching: 'avatarcrouching',\r\n    avatardashing: 'avatardashing',\r\n    avatarfalling: 'avatarfalling'\r\n  },\r\n  door: {\r\n    pos: [29.5, 15.5],\r\n    size: [1.92, 1.92],\r\n    bodytype: 'static',\r\n    density: 0.0,\r\n    friction: 0.0,\r\n    restitution: 0.0,\r\n    texture: 'goal',\r\n    sensor: true,\r\n    nextlevel: 0,\r\n    space: 3\r\n  },\r\n  turrets: {\r\n    turret1: {\r\n      pos: [18.5,10.3],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"turret\",\r\n      entitytype: \"present\",\r\n      cooldown: 360,\r\n      direction: [-3.0, 0.0],\r\n      bodytype: \"static\",\r\n      density: 1.0\r\n    },\r\n    turret2: {\r\n      pos: [8.5, 5.0],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"turret\",\r\n      entitytype: \"past\",\r\n      cooldown: 480,\r\n      direction: [0.0, 2.0],\r\n      bodytype: \"static\",\r\n      density: 1.0\r\n    }\r\n  }\r\n};\r\n\r\n//styling for container holding Level Window and ItemDashboard\r\nconst containerStyling = {\r\n  height: '600px',\r\n  minWidth: '1000px',\r\n  // width: '100vw',\r\n  display: 'flex'\r\n}\r\n\r\n//styling for this\r\nconst appStyling = {\r\n  minHeight: '20px',\r\n  height: '25px',\r\n  width: '100%'\r\n}\r\n\r\n//downloads state info as a json called export\r\nfunction exportToJson(objectData: JSON) {\r\n  let filename = \"export.json\";\r\n  let contentType = \"application/json;charset=utf-8;\";\r\n  if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n    var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], { type: contentType });\r\n    navigator.msSaveOrOpenBlob(blob, filename);\r\n  } else {\r\n    var a = document.createElement('a');\r\n    a.download = filename;\r\n    a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\r\n    a.target = '_blank';\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n  }\r\n}\r\n\r\n\r\nconst App : React.FC = ({}) => {\r\n  \r\n  const [world, setWorld] = useState(levelInit.world);\r\n  const [avatar, setAvatar] = useState(levelInit.avatar);\r\n  const [door, setDoor] = useState(levelInit.door);\r\n  const [turrets, setTurrets] = useState(levelInit.turrets);\r\n  const [capsules, setCapsules] = useState(levelInit.capsules);\r\n  const [diamonds, setDiamonds] = useState(levelInit.diamonds);\r\n  const [rounds, setRounds] = useState(levelInit.rounds);\r\n  const [enemies, setEnemies] = useState(levelInit.enemies);\r\n  const [gameObjects, setGameObjects] = useState<any>(levelInit); //represents json, init with levelinit\r\n  const [objectPostitions, setOp] = useState(new Object()) // not used yet\r\n\r\n\r\n  let editorObjects = useState([{id:'world', selected: false}]); //not used yet\r\n\r\n  let updateState = (newState:any) => { // updates state\r\n    let {world, platforms, avatar, door, turrets} = newState;\r\n    setWorld(newState.world);\r\n    setAvatar(newState.avatar);\r\n    setDoor(newState.door);\r\n    setTurrets(newState.turrets);\r\n    setGameObjects(newState);\r\n    console.log(\"App avatar\", avatar);\r\n  }\r\n  let selectComponent = (id:string, open:boolean) => { //not used for anything yet\r\n    editorObjects.map(\r\n      (item:any) => {\r\n        if(item.id == id){\r\n          item.selected = true;\r\n        }else{\r\n          item.selected = false;\r\n        }\r\n    })\r\n  }\r\n  //used for debugging and formatting json during download\r\n\r\n  // gravity: -14.7,\r\n  // bounds: [32.0,18.0],\r\n  // \"present_background\": \"present_background\",\r\n  // \"past_background\": \"past_background\",\r\n  // diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n  // capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n  // roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n  // density: 0.0,\r\n  // heavy_density: 10.0,\r\n  // friction: 0.6,\r\n  // restitution: 0.1,\r\n  // bullet_offset: 0.7,\r\n  // effect_volume: 0.8\r\n  let tester = {\r\n    gravity: world.gravity,\r\n    bounds: world.bounds,\r\n    present_background: world.backgroundPres,\r\n    past_background: world.backgroundPast,\r\n    diamondshape: world.diamondshape,\r\n    capsuleshape: world.capsuleshape,\r\n    roundshape: world.roundshape,\r\n    density: world.density,\r\n    heavy_density: world.heavy_density,\r\n    friction: world.friction,\r\n    restitution: world.restitution,\r\n    bullet_offset: world.bullet_offset,\r\n    effect_volume: world.effect_volume,\r\n    door,\r\n    avatar,\r\n    turrets,\r\n    capsules,\r\n    diamonds,\r\n    rounds,\r\n    enemies\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" >\r\n      <header className=\"App-header\" style = {appStyling} >\r\n        <button onClick= {() => exportToJson(JSON.parse(JSON.stringify(tester)))} style = {{height:'20px', fontSize:'7pt'}}>Download</button>\r\n      </header>\r\n      <div style = {containerStyling}>\r\n        <LevelWindow key = {JSON.stringify(gameObjects) + \"lw\"} backgroundPastPath = {world.backgroundPast} backgroundPresPath = {world.backgroundPres} \r\n          gameObjectState = {gameObjects} updateState = {updateState}></LevelWindow>\r\n        <ItemDashboard key = {JSON.stringify(gameObjects)} gameObjectsInput={gameObjects} update={updateState} selected={selectComponent}>\r\n          </ItemDashboard>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import '!style-loader!css-loader!bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}