{"version":3,"sources":["components/styles.module.css","components/Turret.tsx","components/World.tsx","components/Door.tsx","components/Avatar.tsx","components/Capsule.tsx","components/Diamond.tsx","components/Round.tsx","components/Enemy.tsx","components/AddButton.tsx","components/Spike.tsx","components/ItemDashboard.tsx","components/LevelWindowItem.tsx","components/LevelWindow.tsx","App.tsx","index.tsx"],"names":["module","exports","Turret","gc","info","update","selected","id","world","useState","isOpen","setIsOpen","pos","shrink","texture","entitytype","cooldown","direction","bodytype","density","posState","shrinkState","textureState","densityState","bodytypeState","entitytypeState","cooldownState","directionState","convertedPos","bounds","updatedState","ButtonGroup","style","width","Button","color","onClick","backgroundColor","marginBottom","isOpened","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onBlur","e","target","value","defaultValue","display","height","opacity","position","left","bottom","World","gravity","backgroundPres","backgroundPast","diamondshape","capsuleshape","roundshape","heavy_density","friction","restitution","bullet_offset","effect_volume","gravityState","boundsState","backgroundPastState","backgroundPresState","diamondshapeState","capsuleshapeState","roundshapeState","densityShape","heavy_densityState","frictionState","restitutionState","bullet_offsetState","effect_volumeState","Door","size","sensor","nextlevel","space","console","log","sizeState","sensorState","nextlevelState","spaceState","default","Value","toString","Avatar","avatarstanding","avatarcrouching","avatardashing","avatarfalling","avatarstandingState","avatarcrouchingState","avatardashingState","avatarfallingState","Capsule","name","nameState","resitution","Diamond","Round","Enemy","aitype","aitypeState","AddButton","gameObjects","updateTurret","updateEnemy","updatePlatform","numPlat","updateNumPlat","updateSpike","avatar","door","turrets","diamonds","rounds","enemies","capsules","isCheckedTurret","setIsCheckedTurret","isCheckedEnemy","setIsCheckedEnemy","isCheckedPlatform","setIsCheckedPlatform","isCheckedSpike","setIsCheckedSpike","posStateTurret","shrinkStateTurret","textureStateTurret","densityStateTurret","bodytypeStateTurret","entitytypeStateTurret","cooldownStateTurret","directionStateTurret","posStateEnemy","shrinkStateEnemy","densityStateEnemy","bodytypeStateEnemy","entitytypeStateEnemy","cooldownStateEnemy","aitypeStateEnemy","platformType","posStatePlatform","bodytypeStatePlatform","densityStatePlatform","frictionStatePlatform","restitutionStatePlatform","spaceStatePlatform","posStateSpike","bodytypeStateSpike","densityStateSpike","frictionStateSpike","restitutionStateSpike","textureStateSpike","spaceStateSpike","angleStateSpike","itemTypeStyle","marginLeft","UncontrolledCollapse","toggler","Form","inline","FormGroup","Label","check","onChange","type","defaultChecked","newTurret","newEnemy","newKey","time","newPlatform","newSpike","angle","Spike","angleState","windowStyling","background","float","overflow","ItemDashboard","gameObjectsInput","updateNumPlatApp","numEnemy","updateNumEnemyApp","JSON","parse","stringify","setGameObjects","spikes","updateTurretState","newTurr","newTurrets","add","Object","entries","key","updateNumEnemy","newGameObjects","updateCapsuleState","newCap","newCapsules","updateDiamondState","newDia","newDiamonds","updateRoundState","newRound","newRounds","updateEnemyState","newEnemies","n","updateSpikeState","newSpikes","keys","length","newWorld","newDoor","newAva","componentList","components","push","Math","random","className","LevelWindowItem","temp","texturePres","idInput","texturePast","posInput","updatePosInput","centered","scaleY","scaleX","lineX1","lineY1","lineX2","lineY2","setHeight","setWidth","transAngle","undefined","coords","x1","x2","y1","y2","styles","DraggableItem","onStop","data","x","y","Tooltip","title","aria-label","ref","el","src","transform","onLoad","naturalWidth","naturalHeight","alt","zIndex","stroke","strokeWidth","minHeight","minWidth","LevelWindow","backgroundPastPath","gameObjectState","backgroundPresPath","updateState","gameCoordToPx","updatePos","p","px","includes","newGS","windowItems","top","level","levelInit","spikeshape","presentcapsule1","pastcapsule1","presentdiamond1","pastdiamond1","pastdiamond2","presentround1","presentround2","pastround1","enemy1","enemy2","turret1","turret2","spike0","spike1","containerStyling","headerStyling","padding","App","setWorld","setAvatar","setDoor","setTurrets","setCapsules","setDiamonds","setRounds","setEnemies","setSpikes","setNumPlat","setNumEnemy","editorObjects","newState","tester","present_background","past_background","rename","base","objects","index","newObject","reader","FileReader","onload","newJSON","result","reformat","htmlFor","fontSize","objectData","filename","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","a","document","createElement","download","href","encodeURIComponent","body","appendChild","click","removeChild","exportToJson","files","readAsText","open","map","item","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cddc502b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DraggableItem\":\"styles_DraggableItem__2T3Fe\"};","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, ButtonGroup, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"turret2\": {\r\n//     \"pos\": [8.5, 5.0],\r\n//     \"shrink\": [0.0168, 0.021375],\r\n//     \"texture\": \"turret\",\r\n//     \"entitytype\": \"past\",\r\n//     \"cooldown\": 480,\r\n//     \"direction\": [0.0, 2.0],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 1.0\r\n//   }\r\n\r\nconst Turret : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, entitytype, cooldown, direction, bodytype, density} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let entitytypeState = entitytype\r\n  let cooldownState = cooldown\r\n  let directionState = direction\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          entitytype:entitytypeState,\r\n          cooldown:cooldownState,\r\n          direction:directionState\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{backgroundColor: '#5143a3', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState(), id)}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {entitytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownState = +e.target.value; update(updatedState(), id)}} defaultValue = {cooldown}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Direction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{directionState = [+e.target.value, direction[1]]; update(updatedState(), id)}} defaultValue = {direction[0]}/>\r\n            <Input onBlur={(e) =>{directionState = [direction[0], +e.target.value]; update(updatedState(), id)}} defaultValue = {direction[1]}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'60px', width: '60px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 20 , bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Turret;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n\r\n// gravity: -14.7,\r\n//     bounds: [32.0,18.0],\r\n//     backgroundPres: 'present_background',\r\n//     backgroundPast: 'past_background',\r\n//     diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n//     capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n//     roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n//     density: 0.0,\r\n//     heavy_density: 10.0,\r\n//     friction: 0.6,\r\n//     restitution: 0.1,\r\n//     bullet_offset: 0.7,\r\n//     effect_volume: 0.8\r\nconst World : React.FC<Props> = ({info, update,selected}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {gravity, bounds, backgroundPres, backgroundPast, diamondshape, capsuleshape, roundshape, density, heavy_density, friction, restitution, bullet_offset, effect_volume} = info\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  let gravityState = gravity\r\n  let boundsState = bounds\r\n  let backgroundPastState = backgroundPast\r\n  let backgroundPresState = backgroundPres\r\n  let diamondshapeState = diamondshape\r\n  let capsuleshapeState = capsuleshape \r\n  let roundshapeState = roundshape\r\n  let densityShape = density\r\n  let heavy_densityState = heavy_density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let bullet_offsetState = bullet_offset\r\n  let effect_volumeState = effect_volume\r\n  \r\n  let updatedState = () => {\r\n    return {\r\n        gravity:gravityState,\r\n        bounds:boundsState,\r\n        backgroundPast:backgroundPastState,\r\n        backgroundPres: backgroundPresState,\r\n        diamondshape: diamondshapeState,\r\n        capsuleshape: capsuleshapeState,\r\n        roundshape: roundshapeState,\r\n        density: densityShape,\r\n        heavy_density: heavy_densityState,\r\n        friction: frictionState,\r\n        restitution: restitutionState,\r\n        bullet_offset: bullet_offsetState,\r\n        effect_volume: effect_volumeState\r\n    }\r\n}\r\n\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ width: '100%', marginBottom: '1em' }}>World</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Gravity</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{gravityState = +e.target.value; update(updatedState())}} defaultValue={gravity} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Bounds</InputGroupText>\r\n          </InputGroupAddon>\r\n          {/* TODO: change bounds input  */}\r\n          <Input onBlur={e =>{boundsState = [+e.target.value,boundsState[1]]; update(updatedState())}} defaultValue={bounds[0]} />\r\n          <Input onBlur={e =>{boundsState = [boundsState[0], +e.target.value]; update(updatedState())}} defaultValue = {bounds[1]} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Past Background</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPastState = e.target.value; update(updatedState())}} defaultValue={backgroundPast} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Pres Background</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPresState = e.target.value; update(updatedState())}} defaultValue={backgroundPres} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Bullet Offset</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{bullet_offsetState = +e.target.value; update(updatedState())}} defaultValue={bullet_offset} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Effect Volume</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{effect_volumeState = +e.target.value; update(updatedState())}} defaultValue={effect_volume} />\r\n        </InputGroup>\r\n        {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Diamond Shape</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPresState = e.target.value; update(updatedState())}} defaultValue={backgroundPres} />\r\n        </InputGroup> */}\r\n        \r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default World;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n}\r\n\r\n// \"door\": {\r\n//   \"pos\": [\r\n//     29.5,\r\n//     15.5\r\n//   ],\r\n//   \"size\": [\r\n//     1.6,\r\n//     1.6\r\n//   ],\r\n//   \"texture\": \"goal\",\r\n//   \"bodytype\": \"static\",\r\n//   \"density\": 0.0,\r\n//   \"friction\": 0.0,\r\n//   \"restitution\": 0.0,\r\n//   \"sensor\": true,\r\n//   \"nextlevel\": 0,\r\n//   \"space\": 3\r\nconst Door : React.FC<Props> = ({info, update,selected, world}) => {\r\n  const{ pos, size, bodytype, density, friction, restitution, texture, sensor, nextlevel, space} = info\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  console.log(sensor);\r\n  let posState = pos\r\n  let sizeState = size\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let sensorState = sensor\r\n  let nextlevelState = nextlevel\r\n  let spaceState = space\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      pos:posState,\r\n      size:sizeState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      restitution:restitutionState,\r\n      texture:textureState,\r\n      sensor:sensorState,\r\n      nextlevel:nextlevelState,\r\n      space:spaceState\r\n    }\r\n\r\n  }\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n    selected('door', isOpen);\r\n  }\r\n  ;\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"door\" style={{ width: '100%', marginBottom: '1rem' }}>Door</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position(x,y)</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{posState[0] = +e.target.value; update(updatedState())}} default Value = {pos[0]}/>\r\n          <Input onBlur={e =>{posState[1] = +e.target.value; update(updatedState())}} default Value = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Size</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{sizeState[0] = +e.target.value; update(updatedState())}} default Value = {size[0]}/>\r\n          <Input onBlur={e =>{sizeState[1] = +e.target.value; update(updatedState())}} default Value = {size[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{bodytypeState = e.target.value; update(updatedState())}} default Value = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{densityState = +e.target.value; update(updatedState())}} default Value = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{frictionState = +e.target.value; update(updatedState())}} default Value = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{restitutionState = +e.target.value; update(updatedState())}} default Value = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{textureState = e.target.value; update(updatedState())}} default Value = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Sensor</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{sensorState = (e.target.value == 'true'); update(updatedState())}} default Value = {sensor.toString()}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Next Level</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{nextlevelState = +e.target.value; update(updatedState())}} default Value = {nextlevel}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{spaceState = e.target.value; update(updatedState())}} default Value = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 40 + 'px', bottom:convertedPos[1] - 40 + 'px'}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Door;\r\n\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world: any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n // \"pos\": [2.5,5.0],/\r\n  //   \"shrink\": [0.0216,0.01125],/\r\n  //   \"texture\": \"dude\",\r\n  //   \"density\": 1.0,\r\n  //   \"bodytype\": \"dynamic\", /\r\n  //   \"avatarstanding\": \"avatarstanding\",\r\n  //   \"avatarcrouching\": \"avatarcrouching\",\r\n  //   \"avatardashing\": \"avatardashing\",\r\n  //   \"avatarfalling\": \"avatarfalling\"\r\n\r\nconst Avatar : React.FC<Props> = ({info, update,selected, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, density, bodytype, avatarstanding, avatarcrouching, avatardashing, avatarfalling} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let avatarstandingState = avatarstanding\r\n  let avatarcrouchingState = avatarcrouching\r\n  let avatardashingState = avatardashing\r\n  let avatarfallingState = avatarfalling\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          avatarstanding: avatarstandingState,\r\n          avatarcrouching: avatarcrouchingState,\r\n          avatardashing: avatardashingState,\r\n          avatarfalling: avatarfallingState\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ width: '100%', marginBottom: '1rem' }}>Avatar</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState())}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState())}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState())}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState())}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState())}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState())}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState())}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState())}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState())}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Standing</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarstandingState = e.target.value; update(updatedState())}} defaultValue = {avatarfalling}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Crouching</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarcrouchingState = e.target.value; update(updatedState())}} defaultValue = {avatarcrouching}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Dashing</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatardashingState = e.target.value; update(updatedState())}} defaultValue = {avatardashing}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Falling</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarfallingState = e.target.value; update(updatedState())}} defaultValue = {avatarfalling}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'60px', width: '60px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 30, bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Avatar;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentcapsule1\": {\r\n//     \"name\": \"present_capsule\",\r\n//     \"pos\": [\r\n//       3.0,\r\n//       7.0\r\n//     ],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_capsule\",\r\n//     \"space\": 1\r\n//   }\r\n\r\nconst Capsule : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('capsule', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"capsule\" style={{ backgroundColor:'#36ffae', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0], bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Capsule;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentdiamond2\": {\r\n//     \"name\": \"present_diamond\",\r\n//     \"pos\": [\r\n//       11.0,\r\n//       7.0\r\n//     ],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_diamond\",\r\n//     \"space\": 1\r\n//   },\r\n\r\nconst Diamond : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#6993f5', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0], bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Diamond;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentround1\": {\r\n//     \"name\": \"present_round\",\r\n//     \"pos\": [11.5, 2.0],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_round\",\r\n//     \"space\": 1\r\n//   },\r\n\r\nconst Round : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#ad42f5', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0], bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Round;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, ButtonGroup, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\nconst Enemy : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, aitype, entitytype, cooldown, bodytype, density} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let entitytypeState = entitytype\r\n  let cooldownState = cooldown\r\n  let aitypeState = aitype\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          aitype: aitypeState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          entitytype:entitytypeState,\r\n          cooldown:cooldownState,\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#f79400', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState(), id)}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {entitytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>AI Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{aitypeState = +e.target.value; update(updatedState(), id)}} defaultValue = {aitype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownState = +e.target.value; update(updatedState(), id)}} defaultValue = {cooldown}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'60px', width: '60px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 30, bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Enemy;\r\n","import { UncontrolledCollapse, Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\n\r\nimport React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledDropdown, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  gameObjects: any\r\n  updateTurret: (data: any, id: string) => void\r\n  updateEnemy: (data: any, id: string) => void\r\n  updatePlatform: (data: any, id: string, type: string) => void\r\n  updateNumPlat: (n: number) => void\r\n  updateSpike: (data: any, id: string) => void\r\n  numPlat: number\r\n  // selected: (compName:string, open:boolean) => void\r\n}\r\n\r\nconst AddButton: React.FC<Props> = ({ gameObjects, updateTurret, updateEnemy, updatePlatform, numPlat, updateNumPlat, updateSpike }) => {\r\n  let { avatar, world, door, turrets, diamonds, rounds, enemies, capsules } = gameObjects\r\n  const [isCheckedTurret, setIsCheckedTurret] = useState(true);\r\n  const [isCheckedEnemy, setIsCheckedEnemy] = useState(false);\r\n  const [isCheckedPlatform, setIsCheckedPlatform] = useState(false);\r\n  const [isCheckedSpike, setIsCheckedSpike] = useState(false);\r\n  const [isCheckedCapsule, setIsCheckedCapsule] = useState(false);\r\n  const [isCheckedDiamond, setIsCheckedDiamond] = useState(false);\r\n  const [isCheckedRound, setIsCheckedRound] = useState(false);\r\n  // const [numPlatforms, setNumPlatforms] =useState(numPlat)\r\n  const [init, setInit] = useState(true);\r\n\r\n  let openTurret = () => {\r\n    setIsCheckedEnemy(false);\r\n    setIsCheckedTurret(true);\r\n    setIsCheckedPlatform(false);\r\n    setIsCheckedSpike(false);\r\n  }\r\n  let openEnemy = () => {\r\n    setIsCheckedEnemy(true);\r\n    setIsCheckedTurret(false);\r\n    setIsCheckedPlatform(false);\r\n    setIsCheckedSpike(false);\r\n  }\r\n  let openPlatform = () => {\r\n    setIsCheckedEnemy(false);\r\n    setIsCheckedTurret(false);\r\n    setIsCheckedPlatform(true);\r\n    setIsCheckedSpike(false);\r\n  }\r\n  let openSpike = () => {\r\n    setIsCheckedEnemy(false);\r\n    setIsCheckedTurret(false);\r\n    setIsCheckedPlatform(false);\r\n    setIsCheckedSpike(true);\r\n  }\r\n  // let openCapsule = () => {\r\n  //   openPlatform()\r\n\r\n  // }\r\n\r\n  //turret states \r\n  let posStateTurret = [17, 9]\r\n  let shrinkStateTurret = [0.0168, 0.021375]\r\n  let textureStateTurret = 'turret_present'\r\n  let densityStateTurret = 1.0\r\n  let bodytypeStateTurret = 'static'\r\n  let entitytypeStateTurret = 'present'\r\n  let cooldownStateTurret = 360\r\n  let directionStateTurret = [-3, 0]\r\n\r\n  //enemy states\r\n  let posStateEnemy = [17, 9]\r\n  let shrinkStateEnemy = [0.0168, 0.021375]\r\n  let textureStateEnemy = 'enemypresent'\r\n  let densityStateEnemy = 1.0\r\n  let bodytypeStateEnemy = 'dynamic'\r\n  let entitytypeStateEnemy = 'present'\r\n  let cooldownStateEnemy = 120\r\n  let aitypeStateEnemy = 1\r\n\r\n  //platform states \r\n  let platformType = 'capsule'\r\n  let nameStatePlatform = 'present_capsule'\r\n  let posStatePlatform = [17, 9]\r\n  let bodytypeStatePlatform = 'static'\r\n  let densityStatePlatform = 0.0\r\n  let frictionStatePlatform = .6\r\n  let restitutionStatePlatform = .1\r\n  let textureStatePlatform = 'present_capsule'\r\n  let spaceStatePlatform = 1\r\n\r\n  //spike states\r\n  let posStateSpike = [6.1, 5.5]\r\n  let bodytypeStateSpike = \"static\"\r\n  let densityStateSpike = 0.0\r\n  let frictionStateSpike = 0.6\r\n  let restitutionStateSpike = 0.1 \r\n  let textureStateSpike = \"spikes\"\r\n  let spaceStateSpike = 1\r\n  let angleStateSpike = 0\r\n\r\n  let newTurret = () => {\r\n    let newKey = 'turret'\r\n    let newTurret = {\r\n      pos: posStateTurret,\r\n      shrink: shrinkStateTurret,\r\n      texture: textureStateTurret,\r\n      density: densityStateTurret,\r\n      bodytype: bodytypeStateTurret,\r\n      entitytype: entitytypeStateTurret,\r\n      cooldown: cooldownStateTurret,\r\n      direction: directionStateTurret\r\n    }\r\n    updateTurret(newTurret, newKey)\r\n  }\r\n  let newEnemy = () => {\r\n    let newKey = 'enemy'\r\n    let newEnemy = {\r\n      pos: posStateEnemy,\r\n      shrink: shrinkStateEnemy,\r\n      texture: 'enemy' + entitytypeStateEnemy,\r\n      density: densityStateEnemy,\r\n      bodytype: bodytypeStateEnemy,\r\n      entitytype: entitytypeStateEnemy,\r\n      cooldown: cooldownStateEnemy,\r\n      aitype: aitypeStateEnemy\r\n    }\r\n    updateEnemy(newEnemy, newKey)\r\n  }\r\n  let newSpike = () => {\r\n    let newKey = 'spike'\r\n    let newSpike = {\r\n      pos: posStateSpike,\r\n      bodytype: bodytypeStateSpike,\r\n      density: densityStateSpike,\r\n      friction: frictionStateSpike,\r\n      restitution: restitutionStateSpike,\r\n      texture: textureStateSpike,\r\n      space: spaceStateSpike,\r\n      angle: angleStateSpike,\r\n    }\r\n    updateSpike(newSpike, newKey)\r\n  }\r\n  let newPlatform = (type: string) => {\r\n    let time = 'bugHappened'\r\n    let newKey = 'bugHappened'\r\n    if (spaceStatePlatform === 1) {\r\n      time = 'present'\r\n    } else if (spaceStatePlatform === 2) {\r\n      time = 'past'\r\n    } else if (spaceStatePlatform === 3) {\r\n      time = 'both'\r\n    } else {\r\n      time = 'bugNotPastPres'\r\n    }\r\n\r\n    newKey = time + type\r\n    let newPlatform = {\r\n      name: time + \"_\" + platformType,\r\n      pos: posStatePlatform,\r\n      bodytype: bodytypeStatePlatform,\r\n      density: densityStatePlatform,\r\n      friction: frictionStatePlatform,\r\n      restitution: restitutionStatePlatform,\r\n      texture: time + \"_\" + platformType,\r\n      space: spaceStatePlatform\r\n    }\r\n    updateNumPlat(numPlat + 1)\r\n    updatePlatform(newPlatform, newKey, platformType)\r\n  }\r\n\r\n  let itemTypeStyle = {\r\n    marginLeft: '5px'\r\n  };\r\n  return (\r\n    <div >\r\n      <Button color=\"secondary\" id=\"toggler\" style={{ width: '100%', backgroundColor: '#fa511e', marginBottom: '2em' }}>Add</Button>\r\n      <UncontrolledCollapse style={{ marginBottom: '2em' }} toggler=\"#toggler\">\r\n        <Form inline>\r\n          <FormGroup >\r\n            <Label check inline style={itemTypeStyle}>\r\n              <Input onChange={() => { openTurret() }} type=\"radio\" name=\"itemType\" id=\"itemTypeTurret\" style={{ marginLeft: '8px' }} defaultChecked /> Turret {' '}\r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style={itemTypeStyle}>\r\n              <Input onChange={() => { openEnemy() }} type=\"radio\" name=\"itemType\" id=\"itemTypeEnemy\" /> Enemy {' '}\r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style={itemTypeStyle}>\r\n              <Input onChange={() => { openPlatform() }} type=\"radio\" name=\"itemType\" id=\"itemTypePlatform\" /> Platform {' '}\r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style={itemTypeStyle}>\r\n              <Input onChange={() => { openSpike() }} type=\"radio\" name=\"itemType\" id=\"itemTypePlatform\" /> Spike {' '}\r\n            </Label>\r\n          </FormGroup>\r\n        </Form>\r\n        {/* turret inputs */}\r\n        <Collapse isOpened={isCheckedTurret}>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Position</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { posStateTurret = [+e.target.value, posStateTurret[1]]; }} defaultValue={posStateTurret[0]} />\r\n            <Input onBlur={(e) => { posStateTurret = [posStateTurret[0], +e.target.value]; }} defaultValue={posStateTurret[1]} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Shrink</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { shrinkStateTurret = [+e.target.value, shrinkStateTurret[1]]; }} defaultValue={shrinkStateTurret[0]} />\r\n            <Input onBlur={(e) => { shrinkStateTurret = [shrinkStateTurret[0], +e.target.value]; }} defaultValue={shrinkStateTurret[1]} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Texture</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { textureStateTurret = e.target.value; }} defaultValue={textureStateTurret} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Density</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { densityStateTurret = +e.target.value; }} defaultValue={densityStateTurret} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Body Type</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { bodytypeStateTurret = e.target.value; }} defaultValue={bodytypeStateTurret} />\r\n          </InputGroup>\r\n          <Form inline>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { entitytypeStateTurret = 'present'; textureStateTurret = \"turret_\" + entitytypeStateTurret }} type=\"radio\" name=\"entitytypeTurret\" id=\"present\" style={{ marginLeft: '8px' }} defaultChecked /> Present {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { entitytypeStateTurret = 'past'; textureStateTurret = 'turret_' + entitytypeStateTurret }} type=\"radio\" name=\"entitytypeTurret\" id=\"past\" /> Past {' '}\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Cooldown</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { cooldownStateTurret = +e.target.value; }} defaultValue={cooldownStateTurret} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Direction</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { directionStateTurret = [+e.target.value, directionStateTurret[1]]; }} defaultValue={directionStateTurret[0]} />\r\n            <Input onBlur={(e) => { directionStateTurret = [directionStateTurret[0], +e.target.value]; }} defaultValue={directionStateTurret[1]} />\r\n          </InputGroup>\r\n          <Button onClick={() => { newTurret() }}>Submit</Button>\r\n        </Collapse>\r\n        {/* end turret inputs */}\r\n        {/* begin enemy inputs */}\r\n        <Collapse isOpened={isCheckedEnemy}>\r\n          <Form inline>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { entitytypeStateEnemy = 'present'; }} type=\"radio\" name=\"entitytypeEnemy\" id=\"present\" style={{ marginLeft: '8px' }} defaultChecked /> Present {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { entitytypeStateEnemy = 'past'; }} type=\"radio\" name=\"entitytypeEnemy\" id=\"past\" /> Past {' '}\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Position</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { posStateEnemy = [+e.target.value, posStateEnemy[1]]; }} defaultValue={posStateEnemy[0]} />\r\n            <Input onBlur={(e) => { posStateEnemy = [posStateEnemy[0], +e.target.value]; }} defaultValue={posStateEnemy[1]} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Shrink</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { shrinkStateEnemy = [+e.target.value, shrinkStateEnemy[1]]; }} defaultValue={shrinkStateEnemy[0]} />\r\n            <Input onBlur={(e) => { shrinkStateEnemy = [shrinkStateEnemy[0], +e.target.value]; }} defaultValue={shrinkStateEnemy[1]} />\r\n          </InputGroup>\r\n          <Form inline>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { aitypeStateEnemy = 1; }} type=\"radio\" name=\"aitypeEnemy\"style={{ marginLeft: '8px' }} defaultChecked /> Walk {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { aitypeStateEnemy = 2; }} type=\"radio\" name=\"aitypeEnemy\"/> Teleport{' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { aitypeStateEnemy = 3; }} type=\"radio\" name=\"aitypeEnemy\"/> Gun{' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { aitypeStateEnemy = 4; }} type=\"radio\" name=\"aitypeEnemy\"/> Fly{' '}\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n          {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureStateEnemy = e.target.value;   }} defaultValue = {textureStateEnemy}/>\r\n        </InputGroup> */}\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Density</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { densityStateEnemy = +e.target.value; }} defaultValue={densityStateEnemy} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Body Type</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { bodytypeStateEnemy = e.target.value; }} defaultValue={bodytypeStateEnemy} />\r\n          </InputGroup>\r\n          {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeStateEnemy = e.target.value;   }} defaultValue = {entitytypeStateEnemy}/>\r\n        </InputGroup> */}\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Cooldown</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { cooldownStateEnemy = +e.target.value; }} defaultValue={cooldownStateEnemy} />\r\n          </InputGroup>\r\n          <Button onClick={() => { newEnemy() }}>Submit</Button>\r\n        </Collapse>\r\n        {/* end enemy inputs */}\r\n        {/* begin platform inputs */}\r\n        <Collapse isOpened={isCheckedPlatform}>\r\n          <Form inline>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { platformType = 'capsule'; }} type=\"radio\" name=\"platformType\" id=\"capsule\" style={{ marginLeft: '8px' }} defaultChecked /> Capsule {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { platformType = 'diamond'; }} type=\"radio\" name=\"platformType\" id=\"diamond\" /> Diamond {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { platformType = 'round'; }} type=\"radio\" name=\"platformType\" id=\"round\" /> Round {' '}\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n          <Form inline>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { spaceStatePlatform = 1; }} type=\"radio\" name=\"space\" id=\"present\" style={{ marginLeft: '8px' }} defaultChecked /> Present {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { spaceStatePlatform = 2; }} type=\"radio\" name=\"space\" id=\"past\" /> Past {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { spaceStatePlatform = 3; }} type=\"radio\" name=\"space\" id=\"Both\" /> Both {' '}\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n          {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameStatePlatform = e.target.value;   }} defaultValue = {nameStatePlatform}/>\r\n        </InputGroup> */}\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Position</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { posStatePlatform = [+e.target.value, posStatePlatform[1]]; }} defaultValue={posStatePlatform[0]} />\r\n            <Input onBlur={(e) => { posStatePlatform = [posStatePlatform[0], +e.target.value]; }} defaultValue={posStatePlatform[1]} />\r\n          </InputGroup>\r\n          {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureStatePlatform = e.target.value;   }} defaultValue = {textureStatePlatform}/>\r\n        </InputGroup> */}\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Density</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { densityStatePlatform = +e.target.value; }} defaultValue={densityStatePlatform} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Body Type</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { bodytypeStatePlatform = e.target.value; }} defaultValue={bodytypeStatePlatform} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Friction</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { frictionStatePlatform = +e.target.value; }} defaultValue={frictionStatePlatform} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Restitution</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { restitutionStatePlatform = +e.target.value; }} defaultValue={restitutionStatePlatform} />\r\n          </InputGroup>\r\n          {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceStatePlatform = +e.target.value;   }} defaultValue = {spaceStatePlatform}/>\r\n        </InputGroup> */}\r\n          <Button onClick={() => { newPlatform(platformType) }}>Submit</Button>\r\n        </Collapse>\r\n        <Collapse isOpened={isCheckedSpike}>\r\n          <Form inline>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { spaceStateSpike = 1; }} type=\"radio\" name=\"space\" id=\"present\" style={{ marginLeft: '8px' }} defaultChecked /> Present {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { spaceStateSpike = 2; }} type=\"radio\" name=\"space\" id=\"past\" /> Past {' '}\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Position</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { posStateSpike = [+e.target.value, posStateSpike[1]]; }} defaultValue={posStateSpike[0]} />\r\n            <Input onBlur={(e) => { posStateSpike = [posStateSpike[0], +e.target.value]; }} defaultValue={posStateSpike[1]} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Density</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { densityStateSpike = +e.target.value; }} defaultValue={densityStateSpike} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Body Type</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { bodytypeStateSpike = e.target.value; }} defaultValue={bodytypeStateSpike} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Friction</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { frictionStateSpike = +e.target.value; }} defaultValue={frictionStateSpike} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Restitution</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { restitutionStateSpike = +e.target.value; }} defaultValue={restitutionStateSpike} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Texture</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { textureStateSpike = e.target.value; }} defaultValue={textureStateSpike} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Angle</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { angleStateSpike = +e.target.value; }} defaultValue={angleStateSpike} />\r\n          </InputGroup>\r\n          <Button onClick={() => { newSpike() }}>Submit</Button>\r\n        </Collapse>\r\n      </UncontrolledCollapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddButton;\r\n\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, ButtonGroup, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\nconst Spike : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, bodytype, density, friction, restitution, texture, space, angle} = info\r\n\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n  let angleState = angle\r\n\r\n\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n\r\n  let updatedState = () => {\r\n    return {\r\n      pos: posState,\r\n      bodytype: bodytypeState,\r\n      density: densityState,\r\n      friction: frictionState,\r\n      restitution: restitutionState,\r\n      texture: textureState,\r\n      space: spaceState,\r\n      angle: angleState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('spike', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"spike\" style={{ backgroundColor: '#1aa7e8', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>X</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Angle</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{angleState = +e.target.value; update(updatedState(), id)}} defaultValue = {angle}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'60px', width: '60px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 30, bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spike;\r\n","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\n// import GameObject  from './GameObject';\r\nimport Turret from './Turret';\r\nimport World from './World';\r\nimport Door from './Door';\r\nimport Avatar from './Avatar';\r\nimport Capsule from './Capsule';\r\nimport Diamond from './Diamond';\r\nimport Round from './Round';\r\nimport Enemy from './Enemy';\r\nimport AddButton from './AddButton';\r\nimport Spike from './Spike';\r\nimport { uuid } from 'uuidv4';\r\n\r\ninterface Props {\r\n    gameObjectsInput: any;\r\n    update: (data:any) => void\r\n    selected: (id:string, open:boolean) => void\r\n    numPlat: number\r\n    numEnemy: number\r\n    updateNumPlatApp: (n:number) => void\r\n    updateNumEnemyApp: (n:number) => void\r\n}\r\n\r\n// interface GameObjectType{\r\n//   name: string,\r\n//   jsonitem: Object\r\n// }\r\nconst objectTypes = ['world', 'turret']\r\nconst windowStyling : CSS.Properties= {\r\n    height: '100%',\r\n    width: '100%',\r\n    background: '#aaaaaa',\r\n    display: 'inline-block',\r\n    float: 'right',\r\n    overflow: 'scroll'\r\n}\r\n// function createTurret(p:Array<number>){\r\n//   return <Turret pos = {p} updatefn = {updateTurret}></Turret>;\r\n// }\r\n\r\nconst ItemDashboard : React.FC<Props> = ({gameObjectsInput, update, selected, numPlat, updateNumPlatApp, numEnemy, updateNumEnemyApp}) => {\r\n  const [gameObjects, setGameObjects] = useState<any>(JSON.parse(JSON.stringify(gameObjectsInput)));\r\n  console.log(\"init game objects\", gameObjects)\r\n  let {world, avatar, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n  console.log(\"init spikes\", spikes)\r\n  //updates in App the state assuming world was changed\r\n  let updateWorldState = (newWorld:any) => {\r\n    \r\n    let newGameObjects = {\r\n      world:newWorld,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes\r\n    }\r\n    update(newGameObjects);\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //updates Apps state assuming door was changed\r\n  let updateDoorState = (newDoor:any) => {\r\n    let {world, avatar, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:newDoor,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //updates Apps state assuming avatar was changed\r\n  let updateAvatarState = (newAva:any) => {\r\n    let {world, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:newAva,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateTurretState = (newTurr:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newTurrets = turrets;\r\n    let add = true;\r\n    if( newTurr == 'delete'){\r\n      delete newTurrets[id]\r\n    }else {\r\n      for (let [key, value] of Object.entries(turrets)) {\r\n        if(key == id){\r\n          newTurrets[key] = newTurr;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){id = id + (numEnemy + 1); updateNumEnemy(numEnemy + 1); newTurrets[id] = newTurr}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:newTurrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n\r\n  let updateCapsuleState = (newCap:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newCapsules = capsules;\r\n    let add = true;\r\n    if(newCap == 'delete'){\r\n      delete newCapsules[id]\r\n    } else {\r\n      for (let [key, value] of Object.entries(capsules)) {\r\n        if(key == id){\r\n          newCapsules[key] = newCap;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){newCapsules[id] = newCap}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:newCapsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateDiamondState = (newDia:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newDiamonds = diamonds;\r\n    let add = true;\r\n    if(newDia == 'delete'){\r\n      delete newDiamonds[id]\r\n    } else {\r\n      for (let [key, value] of Object.entries(diamonds)) {\r\n        if(key == id){\r\n          newDiamonds[key] = newDia;\r\n          add = false;\r\n          console.log(\"newDiaID\", id)\r\n          break;\r\n        }\r\n      }\r\n      if(add){\r\n        newDiamonds[id] = newDia\r\n      }\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:newDiamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes\r\n    }\r\n    console.log(\"debugging new diamond platform\", newGameObjects)\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateRoundState = (newRound:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newRounds = rounds;\r\n    let add = true;\r\n    if (newRound == 'delete'){\r\n      delete newRounds[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(rounds)) {\r\n        if(key == id){\r\n          newRounds[key] = newRound;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){newRounds[id] = newRound}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:newRounds,\r\n      enemies:enemies,\r\n      spikes:spikes\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateEnemyState = (newEnemy:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newEnemies = enemies;\r\n    let add = true;\r\n    if (newEnemy == 'delete'){\r\n      delete newEnemies[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(enemies)) {\r\n        if(key == id){\r\n          newEnemies[key] = newEnemy;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){id = id + (numEnemy + 1); updateNumEnemy(numEnemy + 1); newEnemies[id] = newEnemy}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:newEnemies,\r\n      spikes: spikes\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let addPlatform = (newPlatform:any, id:string, type:string) => {\r\n    if( type == 'round'){\r\n      updateRoundState(newPlatform, id +(numPlat + 1))\r\n    } else if (type == 'diamond'){\r\n      updateDiamondState(newPlatform, id  + (numPlat + 1))\r\n    } else {\r\n      updateCapsuleState(newPlatform, id  + (numPlat + 1))\r\n    }\r\n  }\r\n  let updateNumPlat = (n:number) => {\r\n    updateNumPlatApp(n);\r\n  }\r\n  let updateNumEnemy = (n:number) => {\r\n    updateNumEnemyApp(n);\r\n  }\r\n  let updateSpikeState = (newSpike:any, id:string) => {\r\n    console.log(\"currspikes\", gameObjects);\r\n    let newSpikes = spikes;\r\n    let add = true;\r\n    if (newSpike == 'delete'){\r\n      delete newSpikes[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(spikes)) {\r\n        if(key == id){\r\n          newSpikes[key] = newSpike;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){id = id + Object.keys(spikes).length; newSpikes[id] = newSpike}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:newSpikes\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //list of components initially, will always have a door, world, and avatar, avatar not implemented yet\r\n  const [componentList, setComponentList] = useState<any>([\r\n    <AddButton updateSpike = {updateSpikeState} updateNumPlat = {updateNumPlat} numPlat = {numPlat} key = {'add'} gameObjects ={gameObjects} updateEnemy = {updateEnemyState} updateTurret = {updateTurretState} updatePlatform ={addPlatform}></AddButton>,\r\n    <World key = {JSON.stringify(gameObjects) + \" world\"} info = {gameObjects.world} update = {updateWorldState} selected = {selected}></World>,\r\n    <Door world = {gameObjects.world} key = {JSON.stringify(gameObjects) + \" door\"} info = {gameObjects.door} update = {updateDoorState} selected = {selected}></Door>,\r\n    <Avatar world = {gameObjects.world} key = {JSON.stringify(gameObjects) + \" avatar\"} info = {gameObjects.avatar} update = {updateAvatarState} selected = {selected}></Avatar>,\r\n    ]\r\n    )\r\n  let components = componentList;\r\n  for (let [key, value] of Object.entries(gameObjects.turrets)) {\r\n    components.push(<Turret world = {gameObjects.world} key = {key} info = {value} id = {key} update = {updateTurretState} selected = {selected}></Turret>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.capsules)) {\r\n    components.push(<Capsule world = {gameObjects.world} key = {key + Math.random()} info = {value} id = {key} update = {updateCapsuleState} selected = {selected}></Capsule>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.diamonds)) {\r\n    components.push(<Diamond world = {gameObjects.world} key = {key + Math.random()} info = {value} id = {key} update = {updateDiamondState} selected = {selected}></Diamond>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.rounds)) {\r\n    components.push(<Round world = {gameObjects.world} key = {key + Math.random()} info = {value} id = {key} update = {updateRoundState} selected = {selected}></Round>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.enemies)) {\r\n    components.push(<Enemy world = {gameObjects.world} key = {key} info = {value} id = {key} update = {updateEnemyState} selected = {selected}></Enemy>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.spikes)) {\r\n    components.push(<Spike world = {gameObjects.world} key = {key} info = {value} id = {key} update = {updateSpikeState} selected = {selected}></Spike>);\r\n  }\r\n  // <Turret key = {JSON.stringify(gameObjects) + 'turret'} info = {gameObjects.turrets.turret1} id = 'turret1' update = {updateTurretState} selected = {selected}></Turret>\r\n  return (\r\n    <div className=\"ItemDashboard\" style = {windowStyling}>\r\n        {components}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItemDashboard;\r\n","// overflow: scroll;\r\nimport React, { Fragment, useState, ContextType } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\nimport Draggable from 'react-draggable'; // The default\r\nimport { DraggableCore } from 'react-draggable'; // <DraggableCore>\r\nimport styles from './styles.module.css';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\ninterface Props {\r\n  texturePres?: string\r\n  texturePast?: string\r\n  idInput: string\r\n  posInput: Array<number>\r\n  updatePosInput: (a: Array<number>, idUpdate: string) => void\r\n  centered: boolean\r\n  scaleY: number\r\n  scaleX: number\r\n  lineX1?: number\r\n  lineY1?: number\r\n  lineX2?: number\r\n  lineY2?: number\r\n  angle?: number\r\n}\r\n\r\n\r\nconst LevelWindowItem: React.FC<Props> = ({ texturePres, texturePast, idInput, posInput, updatePosInput, centered, scaleY, scaleX, lineX1, lineY1, lineX2, lineY2, angle }) => {\r\n  const [id, setId] = useState<string>(idInput);\r\n  const [height, setHeight] = useState(90)\r\n  const [width, setWidth] = useState(90)\r\n  let trackX = 0;\r\n  let trackY = 0;\r\n  let temp: any;\r\n  let x1 = (typeof lineX1 !== undefined) ? lineX1 : 0\r\n  let x2 = (typeof lineX2 !== undefined) ? lineX2 : 10\r\n  let y1 = (typeof lineY1 !== undefined) ? lineY1 : 0\r\n  let y2 = (typeof lineY2 !== undefined) ? lineY2 : 10\r\n  let transAngle = (typeof angle !== undefined) ? angle : 0\r\n  let transXRegex = /\\.*translate\\((.*?)px/i;\r\n  let transYRegex = /\\.*translate\\(.*px,(.*?)px\\)/i;\r\n  let coords = { x1, x2, y1, y2 }\r\n\r\n  return (\r\n    // updatePosInput takes a list of the new position values (calculated by adding drag pos to current pos) and name of the component\r\n    // .008 * 600/18\r\n    <div className={styles.DraggableItem}>\r\n      <Draggable onStop={(e, data) => updatePosInput([(posInput[0] + data.x), posInput[1] - data.y], idInput)}>\r\n        <div style = {{\r\n            width: width * scaleX,\r\n            height: height * scaleY + 'px',\r\n            position: 'absolute',\r\n            left: centered ? posInput[0] - width * scaleX / 2 : posInput[0],\r\n            bottom: centered ? posInput[1] - height * scaleY / 2 : posInput[1],\r\n          }}>\r\n        <Tooltip title = {id} aria-label= {id}>\r\n          <img\r\n            ref={el => temp = el}\r\n            src={\"./assets/\" + texturePres + \".png\"}\r\n            style={{\r\n              width: width * scaleX,\r\n              height: height * scaleY + 'px',\r\n              transform: 'rotate(' + transAngle + 'deg)'\r\n            }}\r\n            onLoad={(e) => { setWidth(temp.naturalWidth); setHeight(temp.naturalHeight);}}\r\n            alt={texturePres}\r\n          >\r\n          </img>\r\n        </Tooltip>\r\n        </div>\r\n      </Draggable>\r\n      <div style={{\r\n        zIndex: -1,\r\n        width: width * scaleX + 'px',\r\n        height: height * scaleY + 'px',\r\n        position: 'absolute',\r\n        left: (centered ? posInput[0] - width * scaleX / 3 : posInput[0] + width * scaleX / 3) + 'px',\r\n        bottom: posInput[1] + 20 + 'px'\r\n      }}>\r\n        <svg>\r\n          <line {...coords} stroke=\"black\" strokeWidth='2'></line>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LevelWindowItem;","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\nimport Draggable from 'react-draggable'; // The default\r\nimport {DraggableCore} from 'react-draggable'; // <DraggableCore>\r\nimport { url } from 'inspector';\r\nimport LevelWindowItem from './LevelWindowItem';\r\nimport Door from './Door';\r\n\r\n// import avatar from \"/assets/avatar.png\"\r\ninterface Props {\r\n    backgroundPastPath: string\r\n    backgroundPresPath: string\r\n    gameObjectState: any\r\n    updateState: (s:any) => any\r\n}\r\n\r\n// 'url(\"/assets/past_room2.png\")'\r\nconst windowStyling : CSS.Properties= {\r\n    height: '600px',\r\n    minHeight:'600px',\r\n    minWidth: '1000px',\r\n    width: '1200px',\r\n    float: 'left',\r\n    color: '#000000',\r\n    position: 'relative'\r\n}\r\n\r\nconst LevelWindow : React.FC<Props> = ({backgroundPastPath, backgroundPresPath, gameObjectState,updateState}) => {\r\n  const[gameObjects, setGameObjects] = useState(gameObjectState)\r\n  let world = gameObjectState.world\r\n  let avatar = gameObjectState.avatar\r\n  let door = gameObjectState.door\r\n  let turrets = gameObjectState.turrets\r\n  let capsules = gameObjects.capsules\r\n  let diamonds = gameObjects.diamonds\r\n  let rounds = gameObjects.rounds\r\n  let enemies = gameObjects.enemies\r\n  let spikes = gameObjects.spikes\r\n\r\n  //takes an array representing a position in game coordinates and converts to array of pixel coordinates\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n\r\n  //takes an array representing a position in pixels and converts to array of game coordinates\r\n  let pxToGameCoord = (px:Array<number>) => {\r\n    return [px[0] * world.bounds[0] / 1000, px[1] * world.bounds[1] / 600]\r\n  }\r\n  let updatePos = (p:Array<number>, id:string) =>{\r\n    p = pxToGameCoord(p)\r\n    if(id == 'door'){\r\n      // let { size, bodyType,density,friction,restitution,texturePres,texturePast } = gameObjectState.door\r\n      door.pos = p\r\n    } else if (id == 'avatar'){\r\n      avatar.pos = p\r\n    } else if (id.includes('turret')){\r\n      for (let [key, value] of Object.entries(turrets)){\r\n        if(key == id){\r\n          turrets[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('diamond')){\r\n      for (let [key, value] of Object.entries(diamonds)){\r\n        if(key == id){\r\n          diamonds[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('round')){\r\n      for (let [key, value] of Object.entries(rounds)){\r\n        if(key == id){\r\n          rounds[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('capsule')){\r\n      for (let [key, value] of Object.entries(capsules)){\r\n        if(key == id){\r\n          capsules[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('enemy')){\r\n      for (let [key, value] of Object.entries(enemies)){\r\n        if(key == id){\r\n          enemies[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('spike')){\r\n      for (let [key, value] of Object.entries(spikes)){\r\n        if(key == id){\r\n          spikes[key].pos = p;\r\n        }\r\n      }\r\n    }\r\n    let newGS = {\r\n      world:world,\r\n      avatar: avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes\r\n    }\r\n    setGameObjects(newGS)\r\n    updateState(newGS)\r\n  }\r\n  let coords = {\r\n    x1: 0,\r\n    y1: 0,\r\n    x2: 10,\r\n    y2: 10\r\n  }\r\n  // rescale formular platform height =  .008 * 600/world.bounds[1]\r\n  let windowItems = [\r\n    <LevelWindowItem scaleX = {.03 * 1000/ world.bounds[0]} scaleY = {.03 * 600 / world.bounds[1]} centered = {true} key = {\"door\"} texturePres = {gameObjectState.door.texture} idInput = \"door\" posInput = {gameCoordToPx(gameObjectState.door.pos)} updatePosInput = {updatePos}></LevelWindowItem>,\r\n    <LevelWindowItem scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600 / world.bounds[1]} centered = {true} key = {\"avatar\"} texturePres = {gameObjectState.avatar.texture} idInput = \"avatar\" posInput = {gameCoordToPx(gameObjectState.avatar.pos)} updatePosInput = {updatePos}></LevelWindowItem>\r\n  ]\r\n  for (let [key, value] of Object.entries(turrets)) {\r\n    windowItems.push(<LevelWindowItem lineX1 = {turrets[key].pos[0] + turrets[key].direction[0]*20}  lineX2 = {turrets[key].pos[0]} lineY2 = {turrets[key].pos[1]} lineY1 = {turrets[key].pos[1] + turrets[key].direction[1] * 20} scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {turrets[key].texture} idInput = {key} posInput = {gameCoordToPx(turrets[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n    // windowItems.push(<div style = {{zIndex:-1, position:'absolute' as 'absolute', left:gameCoordToPx(turrets[key].pos)[0], bottom:gameCoordToPx(turrets[key].pos)[1]}}><svg height = '60px' width = '160px'>\r\n    //   <line x1 = {turrets[key].pos[0]} y1= {turrets[key].pos[1]} x2 = {turrets[key].pos[0] + turrets[key].direction[0] * 20} y2 = {turrets[key].pos[1] + turrets[key].direction[1]} stroke = \"black\" strokeWidth = '2'></line>\r\n    // </svg></div>);\r\n  }\r\n  for (let [key, value] of Object.entries(capsules)) {\r\n    windowItems.push(< LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {capsules[key].texture} idInput = {key} posInput = {gameCoordToPx(capsules[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(diamonds)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {diamonds[key].texture} idInput = {key} posInput = {gameCoordToPx(diamonds[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(rounds)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {rounds[key].texture} idInput = {key} posInput = {gameCoordToPx(rounds[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(enemies)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600/world.bounds[1]} centered = {true} key = {key} texturePres = {enemies[key].texture} idInput = {key} posInput = {gameCoordToPx(enemies[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(spikes)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.01 * 1000/ world.bounds[0]} scaleY = {.01 * 600/world.bounds[1]} centered = {true} key = {key} texturePres = {spikes[key].texture} idInput = {key} posInput = {gameCoordToPx(spikes[key].pos)} updatePosInput = {updatePos} angle = {spikes[key].angle}></LevelWindowItem>);\r\n  }\r\n  return (\r\n    <div className=\"LevelWindow\" style = {windowStyling}>\r\n      <img style = {{position:'absolute', top:'0px', left:'0px', height:'600px',width:'1000px', zIndex:-10}}src = {\"./assets/\"+ backgroundPastPath+\".png\"}></img>\r\n      {windowItems}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LevelWindow;\r\n","import React, { Fragment, useState } from 'react'\r\nimport './App.css';\r\nimport World from './components/World';\r\nimport ItemDashboard from './components/ItemDashboard';\r\nimport LevelWindow from './components/LevelWindow';\r\nimport Turret from './components/Turret';\r\nimport Door from './components/Door';\r\nimport Avatar from './components/Avatar';\r\n// import uuid from 'uuid';\r\n\r\n//initial json and level\r\nlet level = 0;\r\nlet levelInit = {\r\n  world: {\r\n    gravity: -14.7,\r\n    bounds: [32.0,18.0],\r\n    backgroundPres: 'present_background',\r\n    backgroundPast: 'past_background',\r\n    diamondshape: [0.4, 1.8, 0.5, 1.8, 2.1, 1.8, 2.2, 1.8, 1.4, 0.1],\r\n    capsuleshape: [0.4, 1.1, 0.5, 1.1, 2.6, 1.1, 2.7, 1.1, 2.6, 0.6, 2.0, 0.2, 1.1, 0.2, 0.5, 0.6],\r\n    roundshape: [0.4, 1.4, 0.8, 1.7, 2.1, 1.7, 2.4, 1.4, 2.3, 0.8, 1.7, 0.3, 1.1, 0.3],\r\n    spikeshape: [0.3, -0.6, 0.0, -0.2, -0.6, 0.0, -0.5, 0.4, 0.0, 0.6, 0.4, -0.2, 0.6, -0.3],\r\n    density: 0.0,\r\n    heavy_density: 10.0,\r\n    friction: 0.6,\r\n    restitution: 0.1,\r\n    bullet_offset: 0.7,\r\n    effect_volume: 0.8\r\n  },\r\n  capsules: {\r\n    presentcapsule1: {\r\n      name: \"present_capsule\",\r\n      pos: [\r\n        3.0,\r\n        7.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_capsule\",\r\n      space: 1\r\n    },\r\n    pastcapsule1: {\r\n      name: \"past_capsule\",\r\n      pos: [\r\n        4.5,\r\n        1.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_capsule\",\r\n      space: 2\r\n    }\r\n  },\r\n  diamonds: {\r\n    presentdiamond1: {\r\n      name: \"present_diamond\",\r\n      pos: [\r\n        1.0,\r\n        2.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_diamond\",\r\n      space: 1\r\n    },\r\n    pastdiamond1: {\r\n      name: \"past_diamond\",\r\n      pos: [\r\n        13.5,\r\n        3.5\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_diamond\",\r\n      space: 2\r\n    },\r\n    pastdiamond2: {\r\n      name: \"past_diamond\",\r\n      pos: [\r\n        20.0,\r\n        5.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_diamond\",\r\n      space: 2\r\n    }\r\n  },\r\n  rounds: {\r\n    presentround1: {\r\n      name: \"present_round\",\r\n      pos: [11.5, 2.0],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_round\",\r\n      space: 1\r\n    },\r\n    presentround2: {\r\n      name: \"present_round\",\r\n      pos: [ 9.5, 13.0 ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_round\",\r\n      space: 1\r\n    },\r\n    pastround1: {\r\n      name: \"past_round\",\r\n      pos: [ 2.0, 13.0 ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_round\",\r\n      space: 2\r\n    },\r\n  },\r\n  enemies: {\r\n    enemy1: {\r\n      pos: [13.0, 6.0],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"enemypresent\",\r\n      entitytype: \"present\",\r\n      aitype: 1,\r\n      cooldown: 120,\r\n      bodytype: \"dynamic\",\r\n      density: 1.0\r\n    },\r\n    enemy2: {\r\n      pos: [15.625, 11.03125],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"enemypast\",\r\n      aitype: 1,\r\n      entitytype: \"past\",\r\n      cooldown: 120,\r\n      bodytype: \"dynamic\",\r\n      density: 1.0\r\n    }\r\n  },\r\n  avatar: {\r\n    pos: [2.5, 5.0],\r\n    shrink: [0.0216,0.01125],\r\n    texture: 'dude',\r\n    density: 1.0,\r\n    bodytype: 'dynamic',\r\n    avatarstanding: 'avatarstanding',\r\n    avatarcrouching: 'avatarcrouching',\r\n    avatardashing: 'avatardashing',\r\n    avatarfalling: 'avatarfalling'\r\n  },\r\n  door: {\r\n    pos: [29.5, 15.5],\r\n    size: [1.92, 1.92],\r\n    bodytype: 'static',\r\n    density: 0.0,\r\n    friction: 0.0,\r\n    restitution: 0.0,\r\n    texture: 'goal',\r\n    sensor: true,\r\n    nextlevel: 0,\r\n    space: 3\r\n  },\r\n  turrets: {\r\n    turret1: {\r\n      pos: [18.5,10.3],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"turret_present\",\r\n      entitytype: \"present\",\r\n      cooldown: 360,\r\n      direction: [-3.0, 0.0],\r\n      bodytype: \"static\",\r\n      density: 1.0\r\n    },\r\n    turret2: {\r\n      pos: [8.5, 5.0],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"turret_past\",\r\n      entitytype: \"past\",\r\n      cooldown: 480,\r\n      direction: [0.0, 2.0],\r\n      bodytype: \"static\",\r\n      density: 1.0\r\n    }\r\n  },\r\n  spikes:{\r\n    spike0:{\r\n      pos: [3,4],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"spikes\",\r\n      space: 1,\r\n      angle: 30\r\n    },\r\n    spike1:{\r\n      pos: [5,6],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"spikes\",\r\n      space: 1,\r\n      angle: 30\r\n    }\r\n\r\n  }\r\n};\r\n\r\n//styling for container holding Level Window and ItemDashboard\r\nconst containerStyling = {\r\n  height: '600px',\r\n  minWidth: '1000px',\r\n  // width: '100vw',\r\n  display: 'flex'\r\n}\r\n\r\n//styling for this\r\nconst headerStyling = {\r\n  minHeight: '30px',\r\n  height: '30px',\r\n  width: '100%',\r\n  display: 'inline-block',\r\n  padding:0\r\n}\r\n\r\n//downloads state info as a json called export\r\nfunction exportToJson(objectData: JSON) {\r\n  let filename = \"level_\" + level + \".json\";\r\n  let contentType = \"application/json;charset=utf-8;\";\r\n  if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n    var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], { type: contentType });\r\n    navigator.msSaveOrOpenBlob(blob, filename);\r\n  } else {\r\n    var a = document.createElement('a');\r\n    a.download = filename;\r\n    a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\r\n    a.target = '_blank';\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n  }\r\n}\r\n\r\n\r\nconst App : React.FC = ({}) => {\r\n  \r\n  const [world, setWorld] = useState(levelInit.world);\r\n  const [avatar, setAvatar] = useState(levelInit.avatar);\r\n  const [door, setDoor] = useState(levelInit.door);\r\n  const [turrets, setTurrets] = useState(levelInit.turrets);\r\n  const [capsules, setCapsules] = useState(levelInit.capsules);\r\n  const [diamonds, setDiamonds] = useState(levelInit.diamonds);\r\n  const [rounds, setRounds] = useState(levelInit.rounds);\r\n  const [enemies, setEnemies] = useState(levelInit.enemies);\r\n  const [spikes, setSpikes] = useState(levelInit.spikes);\r\n  const [gameObjects, setGameObjects] = useState<any>(levelInit); //represents json, init with levelinit\r\n  const [numPlat, setNumPlat] = useState(9);\r\n  const [numEnemy, setNumEnemy] = useState(5);\r\n  const [objectPostitions, setOp] = useState(new Object()) // not used yet\r\n\r\n\r\n  let editorObjects = useState([{id:'world', selected: false}]); //not used yet\r\n  let updateState = (newState:any) => { // updates state\r\n    let {world, capsules, diamonds, rounds, enemies, avatar, door, turrets, spikes} = newState;\r\n    setWorld(world)\r\n    setAvatar(avatar)\r\n    setDoor(door)\r\n    setTurrets(turrets)\r\n    setEnemies(enemies)\r\n    setCapsules(capsules)\r\n    setDiamonds(diamonds)\r\n    setRounds(rounds)\r\n    setSpikes(spikes)\r\n    setGameObjects(newState)\r\n  }\r\n  let selectComponent = (id:string, open:boolean) => { //not used for anything yet\r\n    editorObjects.map(\r\n      (item:any) => {\r\n        if(item.id == id){\r\n          item.selected = true;\r\n        }else{\r\n          item.selected = false;\r\n        }\r\n    })\r\n  }\r\n  let updateNumPlat = (n:number) => {\r\n    setNumPlat(n);\r\n  }\r\n  let updateNumEnemy = (n:number) => {\r\n    setNumEnemy(n);\r\n  }\r\n  //used for debugging and formatting json during download\r\n  \r\n  // gravity: -14.7,\r\n  // bounds: [32.0,18.0],\r\n  // \"present_background\": \"present_background\",\r\n  // \"past_background\": \"past_background\",\r\n  // diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n  // capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n  // roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n  // density: 0.0,\r\n  // heavy_density: 10.0,\r\n  // friction: 0.6,\r\n  // restitution: 0.1,\r\n  // bullet_offset: 0.7,\r\n  // effect_volume: 0.8\r\n  let tester = {\r\n    gravity: world.gravity,\r\n    bounds: world.bounds,\r\n    present_background: world.backgroundPres,\r\n    past_background: world.backgroundPast,\r\n    diamondshape: world.diamondshape,\r\n    capsuleshape: world.capsuleshape,\r\n    roundshape: world.roundshape,\r\n    spikeshape: world.spikeshape,\r\n    density: world.density,\r\n    heavy_density: world.heavy_density,\r\n    friction: world.friction,\r\n    restitution: world.restitution,\r\n    bullet_offset: world.bullet_offset,\r\n    effect_volume: world.effect_volume,\r\n    door,\r\n    avatar,\r\n    turrets,\r\n    capsules,\r\n    diamonds,\r\n    rounds,\r\n    enemies,\r\n    spikes,\r\n    \r\n  }\r\n  let rename = (base:string, objects:any) =>{\r\n    let index = 1\r\n    let newObject:any = {}\r\n    for(let [key, value] of Object.entries(objects)){\r\n      newObject[base + index + \"\"] = value\r\n      index++\r\n    }\r\n    return newObject\r\n  }\r\n  let reader = new FileReader()\r\n  reader.onload = function(e:any) {\r\n    let newJSON:any = JSON.parse(JSON.parse(JSON.stringify(e.target.result,null,2)))\r\n    console.log('newjson',newJSON)\r\n    let {gravity, bounds, present_background, past_background, diamondshape, capsuleshape, roundshape}:any = newJSON\r\n    let reformat = {\r\n      world:{\r\n        gravity: gravity,\r\n        bounds:bounds,\r\n        backgroundPres:present_background,\r\n        backgroundPast:past_background,\r\n        diamondshape:diamondshape,\r\n        capsuleshape:capsuleshape,\r\n        roundshape:roundshape\r\n      },\r\n      door:newJSON.door,\r\n      avatar:newJSON.avatar,\r\n      turrets:rename('turret',newJSON.turrets),\r\n      capsules:rename('capsule',newJSON.capsules),\r\n      diamonds:rename('diamond', newJSON.diamonds),\r\n      rounds:rename('round',newJSON.rounds),\r\n      enemies:rename('enemies',newJSON.enemies),\r\n      spikes:rename('spike', newJSON.spikes)\r\n    }\r\n    updateState(reformat);\r\n    \r\n  }\r\n  console.log(\"App\", gameObjects)\r\n  return (\r\n    <div className=\"App\" >\r\n      <div className=\"App-header\" style = {headerStyling} >\r\n        <label htmlFor=\"level_input\">Level</label>\r\n        <input style = {{marginLeft: '20px', height:'20px', fontSize:'7pt'}} id = \"level_input\" type=\"text\" name=\"text\" onChange={(e:any) => {level = e.target.value}}/>\r\n        <button onClick= {() => exportToJson(JSON.parse(JSON.stringify(tester)))} style = {{marginLeft: '20px',height:'20px', fontSize:'7pt'}}>Download</button>\r\n        <input style = {{marginLeft: '20px', height:'20px', fontSize:'7pt'}} type=\"file\" name=\"file\" onChange={(e:any) => {\r\n          if(typeof e.target.files[0] == 'object'){\r\n           reader.readAsText(e.target.files[0])\r\n          }\r\n          }}/>\r\n      </div>\r\n      <div style = {containerStyling}>\r\n        <LevelWindow key = {JSON.stringify(gameObjects) + \"lw\"} backgroundPastPath = {world.backgroundPast} backgroundPresPath = {world.backgroundPres} \r\n          gameObjectState = {gameObjects} updateState = {updateState}></LevelWindow>\r\n        <ItemDashboard updateNumEnemyApp = {updateNumEnemy} numEnemy = {numEnemy} updateNumPlatApp = {updateNumPlat} numPlat = {numPlat} key = {JSON.stringify(gameObjects)} gameObjectsInput={gameObjects} update={updateState} selected={selectComponent}>\r\n          </ItemDashboard>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import '!style-loader!css-loader!bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}