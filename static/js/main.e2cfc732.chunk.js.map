{"version":3,"sources":["components/Turret.tsx","components/World.tsx","components/Door.tsx","components/Avatar.tsx","components/Capsule.tsx","components/Diamond.tsx","components/Round.tsx","components/Enemy.tsx","components/AddButton.tsx","components/ItemDashboard.tsx","components/LevelWindowItem.tsx","components/LevelWindow.tsx","App.tsx","index.tsx"],"names":["Turret","info","update","selected","id","useState","isOpen","setIsOpen","pos","shrink","texture","entitytype","cooldown","direction","bodytype","density","posState","shrinkState","textureState","densityState","bodytypeState","entitytypeState","cooldownState","directionState","updatedState","ButtonGroup","Button","color","onClick","style","backgroundColor","marginBottom","isOpened","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onBlur","e","target","value","defaultValue","World","gravity","bounds","backgroundPres","backgroundPast","diamondshape","capsuleshape","roundshape","heavy_density","friction","restitution","bullet_offset","effect_volume","gravityState","boundsState","backgroundPastState","backgroundPresState","diamondshapeState","capsuleshapeState","roundshapeState","densityShape","heavy_densityState","frictionState","restitutionState","bullet_offsetState","effect_volumeState","Door","size","sensor","nextlevel","space","console","log","sizeState","sensorState","nextlevelState","spaceState","default","Value","toString","Avatar","avatarstanding","avatarcrouching","avatardashing","avatarfalling","avatarstandingState","avatarcrouchingState","avatardashingState","avatarfallingState","Capsule","name","nameState","resitution","Diamond","Round","Enemy","AddButton","gameObjects","updateTurret","updateEnemy","updatePlatform","numPlat","updateNumPlat","avatar","world","door","turrets","diamonds","rounds","enemies","capsules","isCheckedTurret","setIsCheckedTurret","isCheckedEnemy","setIsCheckedEnemy","isCheckedPlatform","setIsCheckedPlatform","posStateTurret","shrinkStateTurret","textureStateTurret","densityStateTurret","bodytypeStateTurret","entitytypeStateTurret","cooldownStateTurret","directionStateTurret","posStateEnemy","shrinkStateEnemy","textureStateEnemy","densityStateEnemy","bodytypeStateEnemy","entitytypeStateEnemy","cooldownStateEnemy","platformType","nameStatePlatform","posStatePlatform","bodytypeStatePlatform","densityStatePlatform","frictionStatePlatform","restitutionStatePlatform","textureStatePlatform","spaceStatePlatform","itemTypeStyle","marginLeft","UncontrolledCollapse","toggler","Form","inline","FormGroup","Label","check","onChange","type","defaultChecked","newTurret","newEnemy","newKey","newPlatform","windowStyling","height","width","background","display","float","overflow","ItemDashboard","gameObjectsInput","updateNumPlatApp","numEnemy","updateNumEnemyApp","JSON","parse","stringify","setGameObjects","updateTurretState","newTurr","newTurrets","add","Object","entries","key","updateNumEnemy","newGameObjects","updateCapsuleState","newCap","newCapsules","updateDiamondState","newDia","newDiamonds","updateRoundState","newRound","newRounds","updateEnemyState","newEnemies","n","newWorld","newDoor","newAva","componentList","components","push","Math","random","className","LevelWindowItem","temp","texturePres","idInput","texturePast","posInput","updatePosInput","centered","scaleY","scaleX","lineX1","lineY1","lineX2","lineY2","setHeight","setWidth","coords","x1","undefined","x2","y1","y2","onStop","data","x","y","ref","el","src","position","left","bottom","onLoad","naturalWidth","naturalHeight","zIndex","stroke","strokeWidth","minHeight","minWidth","LevelWindow","backgroundPastPath","gameObjectState","backgroundPresPath","updateState","gameCoordToPx","gc","updatePos","p","px","includes","newGS","windowItems","top","levelInit","presentcapsule1","pastcapsule1","presentdiamond1","pastdiamond1","pastdiamond2","presentround1","presentround2","pastround1","enemy1","enemy2","turret1","turret2","containerStyling","appStyling","App","setWorld","setAvatar","setDoor","setTurrets","setCapsules","setDiamonds","setRounds","setEnemies","setNumPlat","setNumEnemy","editorObjects","newState","tester","present_background","past_background","objectData","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","a","document","createElement","download","href","encodeURIComponent","body","appendChild","click","removeChild","exportToJson","fontSize","open","map","item","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e2cfc732.chunk.js","sourcesContent":["import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, ButtonGroup, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"turret2\": {\r\n//     \"pos\": [8.5, 5.0],\r\n//     \"shrink\": [0.0168, 0.021375],\r\n//     \"texture\": \"turret\",\r\n//     \"entitytype\": \"past\",\r\n//     \"cooldown\": 480,\r\n//     \"direction\": [0.0, 2.0],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 1.0\r\n//   }\r\n\r\nconst Turret : React.FC<Props> = ({info, update, selected, id}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, entitytype, cooldown, direction, bodytype, density} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let entitytypeState = entitytype\r\n  let cooldownState = cooldown\r\n  let directionState = direction\r\n\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          entitytype:entitytypeState,\r\n          cooldown:cooldownState,\r\n          direction:directionState\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#5143a3', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState(), id)}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {entitytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownState = +e.target.value; update(updatedState(), id)}} defaultValue = {cooldown}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Direction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{directionState = [+e.target.value, direction[1]]; update(updatedState(), id)}} defaultValue = {direction[0]}/>\r\n            <Input onBlur={(e) =>{directionState = [direction[0], +e.target.value]; update(updatedState(), id)}} defaultValue = {direction[1]}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Turret;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n\r\n// gravity: -14.7,\r\n//     bounds: [32.0,18.0],\r\n//     backgroundPres: 'present_background',\r\n//     backgroundPast: 'past_background',\r\n//     diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n//     capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n//     roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n//     density: 0.0,\r\n//     heavy_density: 10.0,\r\n//     friction: 0.6,\r\n//     restitution: 0.1,\r\n//     bullet_offset: 0.7,\r\n//     effect_volume: 0.8\r\nconst World : React.FC<Props> = ({info, update,selected}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {gravity, bounds, backgroundPres, backgroundPast, diamondshape, capsuleshape, roundshape, density, heavy_density, friction, restitution, bullet_offset, effect_volume} = info\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  let gravityState = gravity\r\n  let boundsState = bounds\r\n  let backgroundPastState = backgroundPast\r\n  let backgroundPresState = backgroundPres\r\n  let diamondshapeState = diamondshape\r\n  let capsuleshapeState = capsuleshape \r\n  let roundshapeState = roundshape\r\n  let densityShape = density\r\n  let heavy_densityState = heavy_density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let bullet_offsetState = bullet_offset\r\n  let effect_volumeState = effect_volume\r\n  \r\n  let updatedState = () => {\r\n    return {\r\n        gravity:gravityState,\r\n        bounds:boundsState,\r\n        backgroundPast:backgroundPastState,\r\n        backgroundPres: backgroundPresState,\r\n        diamondshape: diamondshapeState,\r\n        capsuleshape: capsuleshapeState,\r\n        roundshape: roundshapeState,\r\n        density: densityShape,\r\n        heavy_density: heavy_densityState,\r\n        friction: frictionState,\r\n        restitution: restitutionState,\r\n        bullet_offset: bullet_offsetState,\r\n        effect_volume: effect_volumeState\r\n    }\r\n}\r\n\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ marginBottom: '2px' }}>World</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Gravity</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{gravityState = +e.target.value; update(updatedState())}} defaultValue={gravity} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Bounds</InputGroupText>\r\n          </InputGroupAddon>\r\n          {/* TODO: change bounds input  */}\r\n          <Input onBlur={e =>{boundsState = [+e.target.value,boundsState[1]]; update(updatedState())}} defaultValue={bounds[0]} />\r\n          <Input onBlur={e =>{boundsState = [boundsState[0], +e.target.value]; update(updatedState())}} defaultValue = {bounds[1]} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Past Background</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPastState = e.target.value; update(updatedState())}} defaultValue={backgroundPast} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Pres Background</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPresState = e.target.value; update(updatedState())}} defaultValue={backgroundPres} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Bullet Offset</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{bullet_offsetState = +e.target.value; update(updatedState())}} defaultValue={bullet_offset} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Effect Volume</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{effect_volumeState = +e.target.value; update(updatedState())}} defaultValue={effect_volume} />\r\n        </InputGroup>\r\n        {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Diamond Shape</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPresState = e.target.value; update(updatedState())}} defaultValue={backgroundPres} />\r\n        </InputGroup> */}\r\n        \r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default World;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n}\r\n\r\n// \"door\": {\r\n//   \"pos\": [\r\n//     29.5,\r\n//     15.5\r\n//   ],\r\n//   \"size\": [\r\n//     1.6,\r\n//     1.6\r\n//   ],\r\n//   \"texture\": \"goal\",\r\n//   \"bodytype\": \"static\",\r\n//   \"density\": 0.0,\r\n//   \"friction\": 0.0,\r\n//   \"restitution\": 0.0,\r\n//   \"sensor\": true,\r\n//   \"nextlevel\": 0,\r\n//   \"space\": 3\r\nconst Door : React.FC<Props> = ({info, update,selected}) => {\r\n  const{ pos, size, bodytype, density, friction, restitution, texture, sensor, nextlevel, space} = info\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  console.log(sensor);\r\n  let posState = pos\r\n  let sizeState = size\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let sensorState = sensor\r\n  let nextlevelState = nextlevel\r\n  let spaceState = space\r\n\r\n  let updatedState = () => {\r\n    return {\r\n      pos:posState,\r\n      size:sizeState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      restitution:restitutionState,\r\n      texture:textureState,\r\n      sensor:sensorState,\r\n      nextlevel:nextlevelState,\r\n      space:spaceState\r\n    }\r\n\r\n  }\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n    selected('door', isOpen);\r\n  }\r\n  ;\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"door\" style={{ marginBottom: '1rem' }}>Door</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position(x,y)</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{posState[0] = +e.target.value; update(updatedState())}} default Value = {pos[0]}/>\r\n          <Input onBlur={e =>{posState[1] = +e.target.value; update(updatedState())}} default Value = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Size</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{sizeState[0] = +e.target.value; update(updatedState())}} default Value = {size[0]}/>\r\n          <Input onBlur={e =>{sizeState[1] = +e.target.value; update(updatedState())}} default Value = {size[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{bodytypeState = e.target.value; update(updatedState())}} default Value = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{densityState = +e.target.value; update(updatedState())}} default Value = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{frictionState = +e.target.value; update(updatedState())}} default Value = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{restitutionState = +e.target.value; update(updatedState())}} default Value = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{textureState = e.target.value; update(updatedState())}} default Value = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Sensor</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{sensorState = (e.target.value == 'true'); update(updatedState())}} default Value = {sensor.toString()}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Next Level</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{nextlevelState = +e.target.value; update(updatedState())}} default Value = {nextlevel}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{spaceState = e.target.value; update(updatedState())}} default Value = {space}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Door;\r\n\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n // \"pos\": [2.5,5.0],/\r\n  //   \"shrink\": [0.0216,0.01125],/\r\n  //   \"texture\": \"dude\",\r\n  //   \"density\": 1.0,\r\n  //   \"bodytype\": \"dynamic\", /\r\n  //   \"avatarstanding\": \"avatarstanding\",\r\n  //   \"avatarcrouching\": \"avatarcrouching\",\r\n  //   \"avatardashing\": \"avatardashing\",\r\n  //   \"avatarfalling\": \"avatarfalling\"\r\n\r\nconst Avatar : React.FC<Props> = ({info, update,selected}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, density, bodytype, avatarstanding, avatarcrouching, avatardashing, avatarfalling} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let avatarstandingState = avatarstanding\r\n  let avatarcrouchingState = avatarcrouching\r\n  let avatardashingState = avatardashing\r\n  let avatarfallingState = avatarfalling\r\n\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          avatarstanding: avatarstandingState,\r\n          avatarcrouching: avatarcrouchingState,\r\n          avatardashing: avatardashingState,\r\n          avatarfalling: avatarfallingState\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ marginBottom: '1rem' }}>Avatar</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState())}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState())}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState())}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState())}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState())}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState())}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState())}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState())}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState())}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Standing</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarstandingState = e.target.value; update(updatedState())}} defaultValue = {avatarfalling}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Crouching</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarcrouchingState = e.target.value; update(updatedState())}} defaultValue = {avatarcrouching}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Dashing</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatardashingState = e.target.value; update(updatedState())}} defaultValue = {avatardashing}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Falling</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarfallingState = e.target.value; update(updatedState())}} defaultValue = {avatarfalling}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Avatar;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentcapsule1\": {\r\n//     \"name\": \"present_capsule\",\r\n//     \"pos\": [\r\n//       3.0,\r\n//       7.0\r\n//     ],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_capsule\",\r\n//     \"space\": 1\r\n//   }\r\n\r\nconst Capsule : React.FC<Props> = ({info, update, selected, id}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('capsule', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"capsule\" style={{ backgroundColor:'#36ffae', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Capsule;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentdiamond2\": {\r\n//     \"name\": \"present_diamond\",\r\n//     \"pos\": [\r\n//       11.0,\r\n//       7.0\r\n//     ],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_diamond\",\r\n//     \"space\": 1\r\n//   },\r\n\r\nconst Diamond : React.FC<Props> = ({info, update, selected, id}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#6993f5', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Diamond;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentround1\": {\r\n//     \"name\": \"present_round\",\r\n//     \"pos\": [11.5, 2.0],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_round\",\r\n//     \"space\": 1\r\n//   },\r\n\r\nconst Round : React.FC<Props> = ({info, update, selected, id}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#ad42f5', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Round;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, ButtonGroup, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"enemy1\": {\r\n//     \"pos\": [13.0, 6.0],\r\n//     \"shrink\": [0.0168, 0.021375],\r\n//     \"texture\": \"enemypresent\",\r\n//     \"entitytype\": \"present\",\r\n//     \"cooldown\": 120,\r\n//     \"bodytype\": \"dynamic\",\r\n//     \"density\": 1.0\r\n//   },\r\nconst Enemy : React.FC<Props> = ({info, update, selected, id}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, entitytype, cooldown, bodytype, density} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let entitytypeState = entitytype\r\n  let cooldownState = cooldown\r\n\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          entitytype:entitytypeState,\r\n          cooldown:cooldownState,\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#f79400', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState(), id)}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {entitytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownState = +e.target.value; update(updatedState(), id)}} defaultValue = {cooldown}/>\r\n        </InputGroup>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Enemy;\r\n","import { UncontrolledCollapse, Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\n\r\nimport React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledDropdown, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText} from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  gameObjects: any\r\n  updateTurret: (data:any, id:string) => void\r\n  updateEnemy: (data:any, id:string) => void\r\n  updatePlatform: (data:any, id:string, type:string) => void\r\n  updateNumPlat: (n:number) => void\r\n  numPlat:number\r\n  // selected: (compName:string, open:boolean) => void\r\n}\r\n\r\nconst AddButton : React.FC<Props> = ({gameObjects, updateTurret, updateEnemy,updatePlatform, numPlat, updateNumPlat}) => {\r\n  let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n  const [isCheckedTurret, setIsCheckedTurret] = useState(true);\r\n  const [isCheckedEnemy, setIsCheckedEnemy] = useState(false);\r\n  const [isCheckedPlatform, setIsCheckedPlatform] = useState(false);\r\n  const [isCheckedCapsule, setIsCheckedCapsule] = useState(false);\r\n  const [isCheckedDiamond, setIsCheckedDiamond] = useState(false);\r\n  const [isCheckedRound, setIsCheckedRound] = useState(false);\r\n  // const [numPlatforms, setNumPlatforms] =useState(numPlat)\r\n  const [init, setInit] = useState(true);\r\n\r\n  let openTurret = () => {\r\n    setIsCheckedEnemy(false);\r\n    setIsCheckedTurret(true);\r\n    setIsCheckedPlatform(false);\r\n  }\r\n  let openEnemy = () => {\r\n    setIsCheckedEnemy(true);\r\n    setIsCheckedTurret(false);\r\n    setIsCheckedPlatform(false);\r\n  }\r\n  let openPlatform = () => {\r\n    setIsCheckedEnemy(false);\r\n    setIsCheckedTurret(false);\r\n    setIsCheckedPlatform(true);\r\n  }\r\n  // let openCapsule = () => {\r\n  //   openPlatform()\r\n\r\n  // }\r\n  \r\n  //turret states \r\n  let posStateTurret= [17,9]\r\n  let shrinkStateTurret = [0.0168, 0.021375]\r\n  let textureStateTurret = 'turret'\r\n  let densityStateTurret = 1.0\r\n  let bodytypeStateTurret = 'static'\r\n  let entitytypeStateTurret = 'present'\r\n  let cooldownStateTurret = 360\r\n  let directionStateTurret = [-3, 0]\r\n\r\n  //enemy states\r\n  let posStateEnemy= [17, 9]\r\n  let shrinkStateEnemy = [0.0168, 0.021375]\r\n  let textureStateEnemy = 'enemypresent'\r\n  let densityStateEnemy = 1.0\r\n  let bodytypeStateEnemy = 'dynamic'\r\n  let entitytypeStateEnemy = 'present'\r\n  let cooldownStateEnemy = 120\r\n\r\n  //platform states \r\n  let platformType = 'capsule'\r\n  let nameStatePlatform = 'present_capsule'\r\n  let posStatePlatform= [17, 9]\r\n  let bodytypeStatePlatform = 'static'\r\n  let densityStatePlatform = 0.0\r\n  let frictionStatePlatform = .6\r\n  let restitutionStatePlatform = .1\r\n  let textureStatePlatform = 'present_capsule'\r\n  let spaceStatePlatform = 1\r\n\r\n  let newTurret = () => {\r\n    let newKey = 'turret'\r\n    let newTurret = {\r\n      pos:posStateTurret,\r\n      shrink:shrinkStateTurret,\r\n      texture:textureStateTurret,\r\n      density:densityStateTurret,\r\n      bodytype:bodytypeStateTurret,\r\n      entitytype:entitytypeStateTurret,\r\n      cooldown:cooldownStateTurret,\r\n      direction:directionStateTurret\r\n    }\r\n    updateTurret(newTurret, newKey)\r\n  }\r\n  let newEnemy = () => {\r\n    let newKey = 'enemy'\r\n    let newEnemy = {\r\n      pos:posStateEnemy,\r\n      shrink:shrinkStateEnemy,\r\n      texture:textureStateEnemy,\r\n      density:densityStateEnemy,\r\n      bodytype:bodytypeStateEnemy,\r\n      entitytype:entitytypeStateEnemy,\r\n      cooldown:cooldownStateEnemy,\r\n    }\r\n    updateEnemy(newEnemy, newKey)\r\n  }\r\n  let newPlatform = (type:string) => {\r\n    let time = 'bugHappened'\r\n    let newKey = 'bugHappened'\r\n    if (spaceStatePlatform == 1 || spaceStatePlatform == 3){\r\n      time = 'present'\r\n    } else if(spaceStatePlatform == 2){\r\n      time = 'past'\r\n    } else {\r\n      time = 'bugNotPastPres'\r\n    }\r\n\r\n    newKey = time + type\r\n    let newPlatform = {\r\n      name:nameStatePlatform,\r\n      pos:posStatePlatform,\r\n      bodytype:bodytypeStatePlatform,\r\n      density:densityStatePlatform,\r\n      friction:frictionStatePlatform,\r\n      restitution:restitutionStatePlatform,\r\n      texture:textureStatePlatform,\r\n      space:spaceStatePlatform\r\n    }\r\n    updateNumPlat(numPlat + 1)\r\n    updatePlatform(newPlatform, newKey, platformType)\r\n  }\r\n\r\n  let itemTypeStyle = {\r\n    marginLeft: '5px'\r\n  };\r\n  return (\r\n    <div >\r\n      <Button color=\"secondary\" id=\"toggler\" style={{ backgroundColor: '#fa511e', marginBottom: '2px' }}>Add</Button>\r\n      <UncontrolledCollapse toggler = \"#toggler\">\r\n        <Form inline>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {() => {openTurret()}} type=\"radio\" name=\"itemType\" id=\"itemTypeTurret\" style = {{marginLeft: '8px'}}defaultChecked /> Turret {' '} \r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {() => {openEnemy()}} type=\"radio\" name=\"itemType\" id=\"itemTypeEnemy\" /> Enemy {' '}\r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {() => {openPlatform()}} type=\"radio\" name=\"itemType\"  id=\"itemTypePlatform\" /> Platform {' '} \r\n            </Label>\r\n          </FormGroup>  \r\n        </Form>\r\n        {/* turret inputs */}\r\n        <Collapse isOpened = {isCheckedTurret}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posStateTurret =[+e.target.value,posStateTurret[1]]; }} defaultValue = {posStateTurret[0]}/>\r\n            <Input onBlur={(e) =>{posStateTurret =[posStateTurret[0],+e.target.value];  }} defaultValue = {posStateTurret[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkStateTurret =[+e.target.value,shrinkStateTurret[1]]; }} defaultValue = {shrinkStateTurret[0]}/>\r\n            <Input onBlur={(e) =>{shrinkStateTurret =[shrinkStateTurret[0],+e.target.value];  }} defaultValue = {shrinkStateTurret[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureStateTurret = e.target.value;  }} defaultValue = {textureStateTurret}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityStateTurret = +e.target.value;  }} defaultValue = {densityStateTurret}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeStateTurret = e.target.value;  }} defaultValue = {bodytypeStateTurret}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeStateTurret = e.target.value;  }} defaultValue = {entitytypeStateTurret}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownStateTurret = +e.target.value;  }} defaultValue = {cooldownStateTurret}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Direction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{directionStateTurret = [+e.target.value, directionStateTurret[1]];  }} defaultValue = {directionStateTurret[0]}/>\r\n            <Input onBlur={(e) =>{directionStateTurret = [directionStateTurret[0], +e.target.value];  }} defaultValue = {directionStateTurret[1]}/>\r\n        </InputGroup>\r\n        <Button onClick = {() => {newTurret()}}>Submit</Button>\r\n        </Collapse>\r\n        {/* end turret inputs */}\r\n        {/* begin enemy inputs */}\r\n        <Collapse isOpened = {isCheckedEnemy}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posStateEnemy =[+e.target.value,posStateEnemy[1]];   }} defaultValue = {posStateEnemy[0]}/>\r\n            <Input onBlur={(e) =>{posStateEnemy =[posStateEnemy[0],+e.target.value];   }} defaultValue = {posStateEnemy[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkStateEnemy =[+e.target.value,shrinkStateEnemy[1]];   }} defaultValue = {shrinkStateEnemy[0]}/>\r\n            <Input onBlur={(e) =>{shrinkStateEnemy =[shrinkStateEnemy[0],+e.target.value];   }} defaultValue = {shrinkStateEnemy[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureStateEnemy = e.target.value;   }} defaultValue = {textureStateEnemy}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityStateEnemy = +e.target.value;   }} defaultValue = {densityStateEnemy}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeStateEnemy = e.target.value;   }} defaultValue = {bodytypeStateEnemy}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeStateEnemy = e.target.value;   }} defaultValue = {entitytypeStateEnemy}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownStateEnemy = +e.target.value;}} defaultValue = {cooldownStateEnemy}/>\r\n        </InputGroup>\r\n        <Button onClick = {() => {newEnemy()}}>Submit</Button>\r\n        </Collapse>\r\n        {/* end enemy inputs */}\r\n        {/* begin platform inputs */}\r\n        <Collapse isOpened = {isCheckedPlatform}>\r\n        <Form inline>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {(e) => {platformType = 'capsule';}} type=\"radio\" name=\"platformType\" id=\"capsule\" style = {{marginLeft: '8px'}} defaultChecked /> Capsule {' '} \r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {(e) => {platformType = 'diamond';}} type=\"radio\" name=\"platformType\" id=\"diamond\" /> Diamond {' '}\r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style = {itemTypeStyle}>\r\n              <Input onChange = {(e) => {platformType = 'round';}} type=\"radio\" name=\"platformType\"  id=\"round\" /> Round {' '} \r\n            </Label>\r\n          </FormGroup>  \r\n        </Form>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameStatePlatform = e.target.value;   }} defaultValue = {nameStatePlatform}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posStatePlatform =[+e.target.value,posStatePlatform[1]];   }} defaultValue = {posStatePlatform[0]}/>\r\n            <Input onBlur={(e) =>{posStatePlatform =[posStatePlatform[0],+e.target.value];   }} defaultValue = {posStatePlatform[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureStatePlatform = e.target.value;   }} defaultValue = {textureStatePlatform}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityStatePlatform = +e.target.value;   }} defaultValue = {densityStatePlatform}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeStatePlatform = e.target.value;   }} defaultValue = {bodytypeStatePlatform}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionStatePlatform = +e.target.value;   }} defaultValue = {frictionStatePlatform}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionStatePlatform = +e.target.value;   }} defaultValue = {restitutionStatePlatform}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceStatePlatform = +e.target.value;   }} defaultValue = {spaceStatePlatform}/>\r\n        </InputGroup>\r\n        <Button onClick = {() => {newPlatform(platformType)}}>Submit</Button>\r\n        </Collapse>\r\n      </UncontrolledCollapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddButton;\r\n\r\n","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\n// import GameObject  from './GameObject';\r\nimport Turret from './Turret';\r\nimport World from './World';\r\nimport Door from './Door';\r\nimport Avatar from './Avatar';\r\nimport Capsule from './Capsule';\r\nimport Diamond from './Diamond';\r\nimport Round from './Round';\r\nimport Enemy from './Enemy';\r\nimport AddButton from './AddButton';\r\n\r\ninterface Props {\r\n    gameObjectsInput: any;\r\n    update: (data:any) => void\r\n    selected: (id:string, open:boolean) => void\r\n    numPlat: number\r\n    numEnemy: number\r\n    updateNumPlatApp: (n:number) => void\r\n    updateNumEnemyApp: (n:number) => void\r\n}\r\n\r\n// interface GameObjectType{\r\n//   name: string,\r\n//   jsonitem: Object\r\n// }\r\nconst objectTypes = ['world', 'turret']\r\nconst windowStyling : CSS.Properties= {\r\n    height: '100%',\r\n    width: '100%',\r\n    background: '#aaaaaa',\r\n    display: 'inline-block',\r\n    float: 'right',\r\n    overflow: 'scroll'\r\n}\r\n// function createTurret(p:Array<number>){\r\n//   return <Turret pos = {p} updatefn = {updateTurret}></Turret>;\r\n// }\r\n\r\nconst ItemDashboard : React.FC<Props> = ({gameObjectsInput, update, selected, numPlat, updateNumPlatApp, numEnemy, updateNumEnemyApp}) => {\r\n  const [gameObjects, setGameObjects] = useState<any>(JSON.parse(JSON.stringify(gameObjectsInput)));\r\n  let {avatar, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n  //updates in App the state assuming world was changed\r\n  let updateWorldState = (newWorld:any) => {\r\n    \r\n    let newGameObjects = {\r\n      world:newWorld,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects);\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //updates Apps state assuming door was changed\r\n  let updateDoorState = (newDoor:any) => {\r\n    let {world, avatar, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:newDoor,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //updates Apps state assuming avatar was changed\r\n  let updateAvatarState = (newAva:any) => {\r\n    let {world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:newAva,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateTurretState = (newTurr:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newTurrets = turrets;\r\n    let add = true;\r\n    if( newTurr == 'delete'){\r\n      delete newTurrets[id]\r\n    }else {\r\n      for (let [key, value] of Object.entries(turrets)) {\r\n        if(key == id){\r\n          newTurrets[key] = newTurr;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){id = id + (numEnemy + 1); updateNumEnemy(numEnemy + 1); newTurrets[id] = newTurr}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:newTurrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n\r\n  let updateCapsuleState = (newCap:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newCapsules = capsules;\r\n    let add = true;\r\n    if(newCap == 'delete'){\r\n      delete newCapsules[id]\r\n    } else {\r\n      for (let [key, value] of Object.entries(capsules)) {\r\n        if(key == id){\r\n          newCapsules[key] = newCap;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){newCapsules[id] = newCap}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:newCapsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateDiamondState = (newDia:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newDiamonds = diamonds;\r\n    let add = true;\r\n    if(newDia == 'delete'){\r\n      delete newDiamonds[id]\r\n    } else {\r\n      for (let [key, value] of Object.entries(diamonds)) {\r\n        if(key == id){\r\n          newDiamonds[key] = newDia;\r\n          add = false;\r\n          console.log(\"newDiaID\", id)\r\n          break;\r\n        }\r\n      }\r\n      if(add){\r\n        newDiamonds[id] = newDia\r\n      }\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:newDiamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n    }\r\n    console.log(\"debugging new diamond platform\", newGameObjects)\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateRoundState = (newRound:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newRounds = rounds;\r\n    let add = true;\r\n    if (newRound == 'delete'){\r\n      delete newRounds[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(rounds)) {\r\n        if(key == id){\r\n          newRounds[key] = newRound;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){newRounds[id] = newRound}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:newRounds,\r\n      enemies:enemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateEnemyState = (newEnemy:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    let newEnemies = enemies;\r\n    let add = true;\r\n    if (newEnemy == 'delete'){\r\n      delete newEnemies[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(rounds)) {\r\n        if(key == id){\r\n          newEnemies[key] = newEnemy;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){id = id + (numEnemy + 1); updateNumEnemy(numEnemy + 1); newEnemies[id] = newEnemy}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:newEnemies,\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let addPlatform = (newPlatform:any, id:string, type:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules} = gameObjects\r\n    if( type == 'round'){\r\n      updateRoundState(newPlatform, id +(numPlat + 1))\r\n    } else if (type == 'diamond'){\r\n      updateDiamondState(newPlatform, id  + (numPlat + 1))\r\n    } else {\r\n      updateCapsuleState(newPlatform, id  + (numPlat + 1))\r\n    }\r\n  }\r\n  let updateNumPlat = (n:number) => {\r\n    updateNumPlatApp(n);\r\n  }\r\n  let updateNumEnemy = (n:number) => {\r\n    updateNumEnemyApp(n);\r\n  }\r\n  //list of components initially, will always have a door, world, and avatar, avatar not implemented yet\r\n  const [componentList, setComponentList] = useState<any>([\r\n    <AddButton updateNumPlat = {updateNumPlat} numPlat = {numPlat} key = {'add'} gameObjects ={gameObjects} updateEnemy = {updateEnemyState} updateTurret = {updateTurretState} updatePlatform ={addPlatform}></AddButton>,\r\n    <World key = {JSON.stringify(gameObjects) + \" world\"} info = {gameObjects.world} update = {updateWorldState} selected = {selected}></World>,\r\n    <Door key = {JSON.stringify(gameObjects) + \" door\"} info = {gameObjects.door} update = {updateDoorState} selected = {selected}></Door>,\r\n    <Avatar key = {JSON.stringify(gameObjects) + \" avatar\"} info = {gameObjects.avatar} update = {updateAvatarState} selected = {selected}></Avatar>,\r\n    ]\r\n    )\r\n  let components = componentList;\r\n  for (let [key, value] of Object.entries(gameObjects.turrets)) {\r\n    components.push(<Turret key = {key} info = {value} id = {key} update = {updateTurretState} selected = {selected}></Turret>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.capsules)) {\r\n    components.push(<Capsule key = {key + Math.random()} info = {value} id = {key} update = {updateCapsuleState} selected = {selected}></Capsule>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.diamonds)) {\r\n    components.push(<Diamond key = {key + Math.random()} info = {value} id = {key} update = {updateDiamondState} selected = {selected}></Diamond>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.rounds)) {\r\n    components.push(<Round key = {key + Math.random()} info = {value} id = {key} update = {updateRoundState} selected = {selected}></Round>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.enemies)) {\r\n    components.push(<Enemy key = {key} info = {value} id = {key} update = {updateEnemyState} selected = {selected}></Enemy>);\r\n  }\r\n  // <Turret key = {JSON.stringify(gameObjects) + 'turret'} info = {gameObjects.turrets.turret1} id = 'turret1' update = {updateTurretState} selected = {selected}></Turret>\r\n  return (\r\n    <div className=\"ItemDashboard\" style = {windowStyling}>\r\n        {components}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItemDashboard;\r\n","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\nimport Draggable from 'react-draggable'; // The default\r\nimport {DraggableCore} from 'react-draggable'; // <DraggableCore>\r\nimport { url } from 'inspector';\r\nimport Circle from './Circle'\r\n\r\ninterface Props {\r\n    texturePres?: string\r\n    texturePast?: string\r\n    idInput: string\r\n    posInput: Array<number>\r\n    updatePosInput: (a:Array<number>, idUpdate:string) => void\r\n    centered:boolean\r\n    scaleY: number\r\n    scaleX: number\r\n    lineX1?:number\r\n    lineY1?:number\r\n    lineX2?:number\r\n    lineY2?:number\r\n}\r\n\r\n\r\nconst LevelWindowItem : React.FC<Props> = ({texturePres,texturePast,idInput,posInput,updatePosInput, centered, scaleY, scaleX, lineX1, lineY1, lineX2, lineY2}) => {\r\n  const [id, setId] = useState<string>(idInput);\r\n  const [height,setHeight] = useState(90)\r\n  const [width,setWidth] = useState(90)\r\n  let temp:any;\r\n  let x1 = (typeof lineX1 !== undefined) ? lineX1 : 0\r\n  let x2 = (typeof lineX2 !== undefined) ? lineX2 : 10\r\n  let y1 = (typeof lineY1 !== undefined) ? lineY1 : 0\r\n  let y2 = (typeof lineY2 !== undefined) ? lineY2 : 10\r\n  // let x1 = 0\r\n  // let x2 = 10\r\n  // let y1 = 0\r\n  // let y2 = 10\r\n  let coords = {x1,x2,y1,y2}\r\n  // let pxToGameCoord = (px:Array<number>) => {\r\n  //   return [px[0] * world.bounds[0] / 1200, px[1] * world.bounds[1] / 600]\r\n  // }\r\n  // let testheight:number | undefined= 90;\r\n  // let wrap = (n:number) => {\r\n  //   testheight = n\r\n  // }\r\n  return (\r\n    // updatePosInput takes a list of the new position values (calculated by adding drag pos to current pos) and name of the component\r\n    // .008 * 600/18\r\n    <div>\r\n    <Draggable onStop = {(e,data) => updatePosInput([(posInput[0] + data.x),posInput[1] - data.y], idInput)}>\r\n        <img ref = {el => temp = el} src = {\"./assets/\" + texturePres +\".png\"} style = {{width: width * scaleX, height: height * scaleY +'px', position:'absolute', left:centered ? posInput[0] - width*scaleX/2 : posInput[0], bottom:centered ? posInput[1] - height*scaleY/2 : posInput[1]}}\r\n          onLoad={(e) => {setWidth(temp.naturalWidth); setHeight(temp.naturalHeight);}}></img>\r\n    </Draggable>\r\n    <div style = {{zIndex: -1, width: width * scaleX + 'px', height: height * scaleY +'px', position:'absolute', left:centered ? posInput[0] - width*scaleX/2 : posInput[0] + 'px', bottom:posInput[1]+20+'px'}}>\r\n      <svg>\r\n        <line {...coords} stroke = \"black\" strokeWidth = '2'></line>\r\n      </svg>\r\n    </div>\r\n    {/* <Draggable onStop = {(e,data) => updatePosInput([(posInput[0] + data.x),posInput[1] - data.y], idInput)}>\r\n        <img ref = {el => temp = el} src = {\"/assets/\" + texturePres +\".png\"} style = {{position:'absolute', left:posInput[0], bottom: posInput[1]}}\r\n         ></img>\r\n    </Draggable> */}\r\n    </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default LevelWindowItem;","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\nimport Draggable from 'react-draggable'; // The default\r\nimport {DraggableCore} from 'react-draggable'; // <DraggableCore>\r\nimport { url } from 'inspector';\r\nimport LevelWindowItem from './LevelWindowItem';\r\nimport Door from './Door';\r\n\r\n// import avatar from \"/assets/avatar.png\"\r\ninterface Props {\r\n    backgroundPastPath: string\r\n    backgroundPresPath: string\r\n    gameObjectState: any\r\n    updateState: (s:any) => any\r\n}\r\n\r\n// 'url(\"/assets/past_room2.png\")'\r\nconst windowStyling : CSS.Properties= {\r\n    height: '600px',\r\n    minHeight:'600px',\r\n    minWidth: '1000px',\r\n    width: '1200px',\r\n    float: 'left',\r\n    color: '#000000',\r\n    position: 'relative'\r\n}\r\n\r\nconst LevelWindow : React.FC<Props> = ({backgroundPastPath, backgroundPresPath, gameObjectState,updateState}) => {\r\n  const[gameObjects, setGameObjects] = useState(gameObjectState)\r\n  let world = gameObjectState.world\r\n  let avatar = gameObjectState.avatar\r\n  let door = gameObjectState.door\r\n  let turrets = gameObjectState.turrets\r\n  let capsules = gameObjects.capsules\r\n  let diamonds = gameObjects.diamonds\r\n  let rounds = gameObjects.rounds\r\n  let enemies = gameObjects.enemies\r\n\r\n  //takes an array representing a position in game coordinates and converts to array of pixel coordinates\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n\r\n  //takes an array representing a position in pixels and converts to array of game coordinates\r\n  let pxToGameCoord = (px:Array<number>) => {\r\n    return [px[0] * world.bounds[0] / 1000, px[1] * world.bounds[1] / 600]\r\n  }\r\n  let updatePos = (p:Array<number>, id:string) =>{\r\n    p = pxToGameCoord(p)\r\n    if(id == 'door'){\r\n      // let { size, bodyType,density,friction,restitution,texturePres,texturePast } = gameObjectState.door\r\n      door.pos = p\r\n    } else if (id == 'avatar'){\r\n      avatar.pos = p\r\n    } else if (id.includes('turret')){\r\n      for (let [key, value] of Object.entries(turrets)){\r\n        if(key == id){\r\n          turrets[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('diamond')){\r\n      for (let [key, value] of Object.entries(diamonds)){\r\n        if(key == id){\r\n          diamonds[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('round')){\r\n      for (let [key, value] of Object.entries(rounds)){\r\n        if(key == id){\r\n          rounds[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('capsule')){\r\n      for (let [key, value] of Object.entries(capsules)){\r\n        if(key == id){\r\n          capsules[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('enemy')){\r\n      for (let [key, value] of Object.entries(enemies)){\r\n        if(key == id){\r\n          enemies[key].pos = p;\r\n        }\r\n      }\r\n    }\r\n    let newGS = {\r\n      world:world,\r\n      avatar: avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies\r\n    }\r\n    setGameObjects(newGS)\r\n    updateState(newGS)\r\n  }\r\n  let coords = {\r\n    x1: 0,\r\n    y1: 0,\r\n    x2: 10,\r\n    y2: 10\r\n  }\r\n  // rescale formular platform height =  .008 * 600/world.bounds[1]\r\n  let windowItems = [\r\n    <LevelWindowItem scaleX = {.03 * 1000/ world.bounds[0]} scaleY = {.03 * 600 / world.bounds[1]} centered = {true} key = {\"door\"} texturePres = {gameObjectState.door.texture} idInput = \"door\" posInput = {gameCoordToPx(gameObjectState.door.pos)} updatePosInput = {updatePos}></LevelWindowItem>,\r\n    <LevelWindowItem scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600 / world.bounds[1]} centered = {true} key = {\"avatar\"} texturePres = {gameObjectState.avatar.texture} idInput = \"avatar\" posInput = {gameCoordToPx(gameObjectState.avatar.pos)} updatePosInput = {updatePos}></LevelWindowItem>\r\n  ]\r\n  for (let [key, value] of Object.entries(turrets)) {\r\n    windowItems.push(<LevelWindowItem lineX1 = {turrets[key].pos[0] + turrets[key].direction[0]*20}  lineX2 = {turrets[key].pos[0]} lineY2 = {turrets[key].pos[1]} lineY1 = {turrets[key].pos[1] + turrets[key].direction[1] * 20} scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {turrets[key].texture} idInput = {key} posInput = {gameCoordToPx(turrets[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n    // windowItems.push(<div style = {{zIndex:-1, position:'absolute' as 'absolute', left:gameCoordToPx(turrets[key].pos)[0], bottom:gameCoordToPx(turrets[key].pos)[1]}}><svg height = '60px' width = '160px'>\r\n    //   <line x1 = {turrets[key].pos[0]} y1= {turrets[key].pos[1]} x2 = {turrets[key].pos[0] + turrets[key].direction[0] * 20} y2 = {turrets[key].pos[1] + turrets[key].direction[1]} stroke = \"black\" strokeWidth = '2'></line>\r\n    // </svg></div>);\r\n  }\r\n  for (let [key, value] of Object.entries(capsules)) {\r\n    windowItems.push(< LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {capsules[key].texture} idInput = {key} posInput = {gameCoordToPx(capsules[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(diamonds)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {diamonds[key].texture} idInput = {key} posInput = {gameCoordToPx(diamonds[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(rounds)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {rounds[key].texture} idInput = {key} posInput = {gameCoordToPx(rounds[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(enemies)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600/world.bounds[1]} centered = {true} key = {key} texturePres = {enemies[key].texture} idInput = {key} posInput = {gameCoordToPx(enemies[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  return (\r\n    <div className=\"LevelWindow\" style = {windowStyling}>\r\n      <img style = {{position:'absolute', top:'0px', left:'0px', height:'600px',width:'1000px', zIndex:-10}}src = {\"./assets/\"+ backgroundPastPath+\".png\"}></img>\r\n      {windowItems}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LevelWindow;\r\n","import React, { Fragment, useState } from 'react'\r\nimport './App.css';\r\nimport World from './components/World';\r\nimport ItemDashboard from './components/ItemDashboard';\r\nimport LevelWindow from './components/LevelWindow';\r\nimport Turret from './components/Turret';\r\nimport Door from './components/Door';\r\nimport Avatar from './components/Avatar';\r\n// import uuid from 'uuid';\r\n\r\n//initial json\r\nlet levelInit = {\r\n  world: {\r\n    gravity: -14.7,\r\n    bounds: [32.0,18.0],\r\n    backgroundPres: 'present_background',\r\n    backgroundPast: 'past_background',\r\n    diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n    capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n    roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n    density: 0.0,\r\n    heavy_density: 10.0,\r\n    friction: 0.6,\r\n    restitution: 0.1,\r\n    bullet_offset: 0.7,\r\n    effect_volume: 0.8\r\n  },\r\n  capsules: {\r\n    presentcapsule1: {\r\n      name: \"present_capsule\",\r\n      pos: [\r\n        3.0,\r\n        7.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_capsule\",\r\n      space: 1\r\n    },\r\n    pastcapsule1: {\r\n      name: \"past_capsule\",\r\n      pos: [\r\n        4.5,\r\n        1.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_capsule\",\r\n      space: 2\r\n    }\r\n  },\r\n  diamonds: {\r\n    presentdiamond1: {\r\n      name: \"present_diamond\",\r\n      pos: [\r\n        1.0,\r\n        2.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_diamond\",\r\n      space: 1\r\n    },\r\n    pastdiamond1: {\r\n      name: \"past_diamond\",\r\n      pos: [\r\n        13.5,\r\n        3.5\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_diamond\",\r\n      space: 2\r\n    },\r\n    pastdiamond2: {\r\n      name: \"past_diamond\",\r\n      pos: [\r\n        20.0,\r\n        5.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_diamond\",\r\n      space: 2\r\n    }\r\n  },\r\n  rounds: {\r\n    presentround1: {\r\n      name: \"present_round\",\r\n      pos: [11.5, 2.0],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_round\",\r\n      space: 1\r\n    },\r\n    presentround2: {\r\n      name: \"present_round\",\r\n      pos: [ 9.5, 13.0 ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_round\",\r\n      space: 1\r\n    },\r\n    pastround1: {\r\n      name: \"past_round\",\r\n      pos: [ 2.0, 13.0 ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_round\",\r\n      space: 2\r\n    },\r\n  },\r\n  enemies: {\r\n    enemy1: {\r\n      pos: [13.0, 6.0],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"enemypresent\",\r\n      entitytype: \"present\",\r\n      cooldown: 120,\r\n      bodytype: \"dynamic\",\r\n      density: 1.0\r\n    },\r\n    enemy2: {\r\n      pos: [15.625, 11.03125],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"enemypast\",\r\n      entitytype: \"past\",\r\n      cooldown: 120,\r\n      bodytype: \"dynamic\",\r\n      density: 1.0\r\n    }\r\n  },\r\n  avatar: {\r\n    pos: [2.5, 5.0],\r\n    shrink: [0.0216,0.01125],\r\n    texture: 'dude',\r\n    density: 1.0,\r\n    bodytype: 'dynamic',\r\n    avatarstanding: 'avatarstanding',\r\n    avatarcrouching: 'avatarcrouching',\r\n    avatardashing: 'avatardashing',\r\n    avatarfalling: 'avatarfalling'\r\n  },\r\n  door: {\r\n    pos: [29.5, 15.5],\r\n    size: [1.92, 1.92],\r\n    bodytype: 'static',\r\n    density: 0.0,\r\n    friction: 0.0,\r\n    restitution: 0.0,\r\n    texture: 'goal',\r\n    sensor: true,\r\n    nextlevel: 0,\r\n    space: 3\r\n  },\r\n  turrets: {\r\n    turret1: {\r\n      pos: [18.5,10.3],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"turret\",\r\n      entitytype: \"present\",\r\n      cooldown: 360,\r\n      direction: [-3.0, 0.0],\r\n      bodytype: \"static\",\r\n      density: 1.0\r\n    },\r\n    turret2: {\r\n      pos: [8.5, 5.0],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"turret\",\r\n      entitytype: \"past\",\r\n      cooldown: 480,\r\n      direction: [0.0, 2.0],\r\n      bodytype: \"static\",\r\n      density: 1.0\r\n    }\r\n  }\r\n};\r\n\r\n//styling for container holding Level Window and ItemDashboard\r\nconst containerStyling = {\r\n  height: '600px',\r\n  minWidth: '1000px',\r\n  // width: '100vw',\r\n  display: 'flex'\r\n}\r\n\r\n//styling for this\r\nconst appStyling = {\r\n  minHeight: '20px',\r\n  height: '25px',\r\n  width: '100%'\r\n}\r\n\r\n//downloads state info as a json called export\r\nfunction exportToJson(objectData: JSON) {\r\n  let filename = \"export.json\";\r\n  let contentType = \"application/json;charset=utf-8;\";\r\n  if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n    var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], { type: contentType });\r\n    navigator.msSaveOrOpenBlob(blob, filename);\r\n  } else {\r\n    var a = document.createElement('a');\r\n    a.download = filename;\r\n    a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\r\n    a.target = '_blank';\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n  }\r\n}\r\n\r\n\r\nconst App : React.FC = ({}) => {\r\n  \r\n  const [world, setWorld] = useState(levelInit.world);\r\n  const [avatar, setAvatar] = useState(levelInit.avatar);\r\n  const [door, setDoor] = useState(levelInit.door);\r\n  const [turrets, setTurrets] = useState(levelInit.turrets);\r\n  const [capsules, setCapsules] = useState(levelInit.capsules);\r\n  const [diamonds, setDiamonds] = useState(levelInit.diamonds);\r\n  const [rounds, setRounds] = useState(levelInit.rounds);\r\n  const [enemies, setEnemies] = useState(levelInit.enemies);\r\n  const [gameObjects, setGameObjects] = useState<any>(levelInit); //represents json, init with levelinit\r\n  const [numPlat, setNumPlat] = useState(9);\r\n  const [numEnemy, setNumEnemy] = useState(5);\r\n  const [objectPostitions, setOp] = useState(new Object()) // not used yet\r\n\r\n\r\n  let editorObjects = useState([{id:'world', selected: false}]); //not used yet\r\n\r\n  let updateState = (newState:any) => { // updates state\r\n    let {world, capsules, diamonds, rounds, enemies, avatar, door, turrets} = newState;\r\n    setWorld(world);\r\n    setAvatar(avatar);\r\n    setDoor(door);\r\n    setTurrets(turrets);\r\n    setEnemies(enemies)\r\n    setCapsules(capsules)\r\n    setDiamonds(diamonds)\r\n    setRounds(rounds)\r\n    setGameObjects(newState);\r\n  }\r\n  let selectComponent = (id:string, open:boolean) => { //not used for anything yet\r\n    editorObjects.map(\r\n      (item:any) => {\r\n        if(item.id == id){\r\n          item.selected = true;\r\n        }else{\r\n          item.selected = false;\r\n        }\r\n    })\r\n  }\r\n  let updateNumPlat = (n:number) => {\r\n    setNumPlat(n);\r\n  }\r\n  let updateNumEnemy = (n:number) => {\r\n    setNumEnemy(n);\r\n  }\r\n  //used for debugging and formatting json during download\r\n  \r\n  // gravity: -14.7,\r\n  // bounds: [32.0,18.0],\r\n  // \"present_background\": \"present_background\",\r\n  // \"past_background\": \"past_background\",\r\n  // diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n  // capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n  // roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n  // density: 0.0,\r\n  // heavy_density: 10.0,\r\n  // friction: 0.6,\r\n  // restitution: 0.1,\r\n  // bullet_offset: 0.7,\r\n  // effect_volume: 0.8\r\n  let tester = {\r\n    gravity: world.gravity,\r\n    bounds: world.bounds,\r\n    present_background: world.backgroundPres,\r\n    past_background: world.backgroundPast,\r\n    diamondshape: world.diamondshape,\r\n    capsuleshape: world.capsuleshape,\r\n    roundshape: world.roundshape,\r\n    density: world.density,\r\n    heavy_density: world.heavy_density,\r\n    friction: world.friction,\r\n    restitution: world.restitution,\r\n    bullet_offset: world.bullet_offset,\r\n    effect_volume: world.effect_volume,\r\n    door,\r\n    avatar,\r\n    turrets,\r\n    capsules,\r\n    diamonds,\r\n    rounds,\r\n    enemies\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" >\r\n      <header className=\"App-header\" style = {appStyling} >\r\n        <button onClick= {() => exportToJson(JSON.parse(JSON.stringify(tester)))} style = {{height:'20px', fontSize:'7pt'}}>Download</button>\r\n      </header>\r\n      <div style = {containerStyling}>\r\n        <LevelWindow key = {JSON.stringify(gameObjects) + \"lw\"} backgroundPastPath = {world.backgroundPast} backgroundPresPath = {world.backgroundPres} \r\n          gameObjectState = {gameObjects} updateState = {updateState}></LevelWindow>\r\n        <ItemDashboard updateNumEnemyApp = {updateNumEnemy} numEnemy = {numEnemy} updateNumPlatApp = {updateNumPlat} numPlat = {numPlat} key = {JSON.stringify(gameObjects)} gameObjectsInput={gameObjects} update={updateState} selected={selectComponent}>\r\n          </ItemDashboard>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import '!style-loader!css-loader!bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}